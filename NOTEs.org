#+SETUPFILE: ~/Documents/style.setup

#+STARTUP: inlineimages:png
#+OPTIONS: num:nil
#+LATEX_HEADER: \usepackage{ulem}
#+LATEX_HEADER: \usepackage{ctex}
#+LaTeX_HEADER: \sectionfont{\normalfont\scshape}
#+LaTeX_HEADER: \subsectionfont{\normalfont\itshape}
#+AUTHOR: whiothes
#+title: Linux鸟哥的私房菜<第四版>
* Linux 鸟哥的私房菜(基础篇)
** DONE 第零章 计算机概论 [7/7]
*** DONE 0.1 电脑: 辅助人脑的好工具 [6/6]
**** DONE 0.1.1 计算机硬件的五大单元
     * 输入单元: 包括键盘, 鼠标, 读卡器, 扫描仪, 触摸板 等
     * 主机部分: 系统单元, 含主板, CPU与内存等
     * 输出单元: 屏幕, 打印机乖
***** DONE CPU主要单元:
      * 算术逻辑单元
      * 控制单元
**** DONE 0.1.2 一切设计的起点: CPU的架构
***** DONE 精简指令集(Reduced Instruction Set Computer, RISC):
***** DONE 复杂指令集(Complex Instruction Set Computer, CISC):
**** DONE 0.1.3 其他单元的设备
     * 系统单元: 包括CPU与内在及主板相关元件
     * 存储单元: 包括内存(main memory, RAM)与辅助内存, 辅助内存即存储设备
     * 输入, 输出单元: 同时涵盖输入输出的设备, 最常见是触摸屏
**** DONE 0.1.4 运行流程
     * CPU: 通过CPU进行判断与控制身体各部分的活动
     * 内存: 数据暂时存放的位置, 用于给CPU提供信息
     * 硬盘: 记录重要的数据, 以便再次使用
     * 主板: 连接重要的元件
     * 周边设备: 与外界互动
     * 显卡: 向外界呈现数据
     * 电源: 提供所有元件工作运行的能源
**** DONE 0.1.5 电脑按用途分类
     * 超级计算机: 用于需要有高速计算的计划中.如国防军事, 气象预测, 太空科技, 仿真
     * 大型计算机: 也具有数个高速的CPU, 功能上不及超级计算机,
       但也可用来处理大量数据与复杂的运算.如大型企业的主机, 全国性的证券交易所等
     * 迷你电脑: 用作科学研究, 工程分析与工厂的流程管理
     * 工作站: 针对特殊用途而设计的电脑, 曾用作学术研究与工程分析
     * 微电脑: 个人电脑, 可分为桌面型 及便携式,
       目前的微个人电脑运算速度可高于式作站, 但工作站强调的是稳定不死机,
       且运算过程要完全正确.
**** DONE 0.1.6 电脑上面常用的计算单位
     * 容量单位
       | 进位制 | Kilo | Mega  | Giga  | Tera  | Peta  | Exa   | Zetta |
       | 二进制 | 1024 | 1024K | 1024M | 1024G | 1024T | 1024P | 1024E |
       | 十进制 | 1000 | 1000K | 1000M | 1000G | 1000T | 1000P | 1000E |
       一般文件大小使用二进制, 速度单位使用10进制
     * 速度单位
       CPU的运算速度常使用MHz或GHz, Hz为秒分之一.
       网络传输方面, 常使用的单位Mbps(Mbits per seconds)
*** DONE 0.2 个人电脑架构与相关设备元件 [8/8]
    早期的芯片组桥接器:
    1.北桥: 负责连接速度较快的CPU, 内存与显卡接口等元件.
    目前的主流架构中大多将北桥内存控制器整合到CPU封装中了
    2.南桥: 负责连接速度缓慢的设备, 包括硬盘, USB, 网卡等.
**** DONE 0.2.1 CPU
     * CPU的工作频率:外频与倍频
       外频指的是CPU与外部元件进行数据传输时的速度,
       倍频则是CPU内部用来加速工作性能的倍数, 所以两者相乘才是CPUC的频率.
       如: 内频为3.0GHz, 外频为333Mhz, 则倍频为9  (3.0G＝333M×9, 1G＝1000M)
     * 32位与64位的CPU与总线"宽度"
       内存1600MHz, CPU总线宽度64位, 则:\\
       CPU可以从内存中b以得的最快带宽就是1600MHz 64bit = 1600MHz 8Bytes = 12.8GByte/s
       CPU每次能够处理的数据量称为 *字组大小*
     * CPU等级
     * 超线程(Hyper-Threading, HT)
       将重要的寄存器(register)分成两群.
**** DONE 0.2.2 内存
     * 多通道设计
       将两个内存汇整在一起, 以便增加总线宽度, 要启用双通道必须安插两支(四支)内存
     * DRAM与SRAM
       CPU的第二层高速缓存内存
     * 只读存储器(ROM)
**** DONE 0.2.3 显卡
     1024 * 768(每个像素3Bytes)分辨率屏幕占用内存:
     1024 * 768 * 3 / 1024 / 1024 = 2.25Mbytes
**** DONE 0.2.4 硬盘与存储设备
     * 盘片上的数据
     * 传输接口
     * SATA接口
     * SAS接口:　比SATA的速度快, 盘片转速与传输速度也比SATA快, 但昂贵
     * USB接口:
     * 固态硬盘
     * 选购与运行须知
       * HDD或SSD
       * 容量
       * 缓冲内存.越大越好
       * 转速
       * 运行须知 *在电脑通电之后, 不要移动主机, 避免抖动到硬盘.不要拔电关机,
         正常关机以恢复机械手臂到原位*
**** DONE 0.2.5 扩展卡与接口
     * 多信道卡
**** DONE 0.2.6 主板
     * 发挥扩展卡性能须考虑的插槽位置, 安插在与CPU直接连线的插槽性能最佳 .
     * 设备I/O位址与IRQ中断信道
     * CMOS与BIOS
     * 连接周边设备的接口
     * PS/2接口: 原常见的键鼠接口, 现被USB取代, 新主板甚至不再提供
     * USB接口: USB2.0/3.0, 3.0为蓝色插槽
     * 声音输出, 输入与麦克风: 圆形插孔
     * RJ-45网络头: 八蕊线, 接上网络线后接头会有信号灯亮起
     * HDMI:同时传输声音与影像.
**** DONE 0.2.7 电源供应器
     * 能源转换率
**** DONE 0.2.8 选购须知
*** DONE 0.3 数据表示方式 [2/2]
**** DONE 0.3.1 数字系统
     十进制与二进制的转换
**** DONE 0.3.2 文字编码系统
*** DONE 0.4 软件程序运行 [3/3]
**** DONE 0.4.1 机器程序与编译程序
**** DONE 0.4.2 操作系统
     * 操作系统核心
       * 系统调用
         * 操作系统的核心层直接参考硬件规格写成,
           同一个操作系统不能够在不一样的硬件架构下运行.
         * 操作系统只是在管理整个硬件资源, 包括CPU, 内存, 输入输出设备及文件系统.
         * 应用程序的开发都是参考操作系统提供的开发接口, 所以程序只能在该操作系统上面运行
         * 核心功能
           * 系统调用接口(System call interface)
           * 程序管理(Process control)
           * 内存管理(Memeory management)
           * 文件系统管理(Filesystem management)
           * 设备的驱动(Device drivers)
           * 操作系统与驱动程序
             * *重点*
               * 操作系统必须要能够驱动硬件
               * 一般操作系统会提供开发接口让开发商制作驱动程序
               * 要使用新硬件功能必须要安装厂商提供的驱动程序
               * 驱动程序是由厂商提供的, 与系统开发者无关
**** DONE 0.4.3 应用程序
*** DONE 0.5 重点回顾 [0/0]
    * 计算机的定义为:"接受使用者输入指令与数据,
      经由中央处理器的数学与逻辑单元运算处理后, 以产生或储存成有用的信息";
    * 电脑的五大单元包括:输入单元、输出单元、控制单元、 算数逻辑单元、存储单元五大部分.
      其中CPU占有控制、算术逻辑单元, 存储单元又包含内存与辅助内存;
    * CPU依设计理念主要分为:精简指令集(RISC)与复杂指令集(CISC)系统
    * 数据会流进/流出内存是CPU所发布的控制命令,
      而CPU实际要处理的数据则完全来自于内存
    * 关于CPU的频率部分:外频指的是CPU与外部元件进行数据传输时的速度,
      倍频则是CPU内部用来加速工作性能的倍数, 两者相乘才是CPU的频率速度
    * 新的CPU设计中, 已将北桥的内存控制芯片整合到CPU内,
      而CPU与内存, 显卡沟通的总线通常称为系统总线.
      南桥就是输入/输出(IO)总线, 主要用于沟通硬盘, USB, 网卡等周边设备
    * CPU每次能够处理的数据量称为字组大小, 字组大小依据CPU的设计分为32位与64位.
    * 个人电脑的内存主要元件为动态随机存取内存(Dynamic Random Access Memory, DRAM),
      CPU内部的第二层高速缓存为静态随机存取内存(Static Random Access Memory, SRAM)
    * BIOS(Basic Input Output System)是一套程序, 写死在主板上一个内存芯片中,
      在未通电时也能记录数据, 即只读存储器(Read Only Memory, ROM);
    * 目前主流的外接卡接口大多为PCIe接口, 最新为PCIe3.0, 单信道速度高达1.0GBytes/s
    * 传统硬盘的组成为:圆形盘片, 机械手臂, 磁头与主轴马达, 盘片组成分为扇区, 磁道和柱面
    * 磁盘连接到主板的接口大多为SAS和SATA
    * 常见的文字编码为ASCII, 中文主流为UTF8
    * 操作系统(Operating System, OS)是一套程序, 用于管理电脑的所有活动及驱动系统中所有硬件
    * 电脑主要以二进制作为单位
*** DONE 0.6 本章习题 [0/0]
*** DONE 0.7 参考资料与延伸阅读 [0/0]
** DONE 第一章 Linux是什么与如何学习 [0/0]
** DONE 第二章 主机规划与磁盘分区 [0/0]
** DONE 第三章 安装Centos7.x [0/0]
** DONE 第四章 首次登录与线上求助 [8/8]
*** DONE 4.1 首次登录系统 [1/1]
**** DONE 4.1.1 首次登陆CentOS 7.x图形接口
*** DONE 4.2 文字模式下指令的下达 [1/1]
**** DONE 4.2.1 开始下达指令
     #+begin_src bash
       command [-option] parameter1 parameter2 ...
       指令     选项     参数1      参数2
     #+end_src
     说明:
     1.第一部分是"指令" 或"可执行文件名"
     2.command为指令名称, 如cd等
     3.[]在实际输入中并不存在, 通常会在选项前加-号, 如-h, 有时--help
     4.parameter1 parameter2 ...为选项的参数3                                                            0:~*                                                               3 min Sun 9:49:44 AM 2017-02-05, 或command的参数
     5.不同部分以空格间隔
     6.[Enter]按下后执行
     7.长指令可以在行尾使用(\)换行.
     8.其它: \\
     i.bash区分英文大小写\\
     ii.详见第十章bash.
*** DONE 4.3 Linux系统的线上求助man page与info page [4/4]
**** DONE 4.3.1 指令的--help求助说明
     #+begin_src bash
       date --help
     #+end_src
**** DONE 4.3.2 man page
     man = manual(操作说明)
     * 第一行:  "DATE(1)", (1)的意义
       | 代号 | 代表内容                                                           |
       |------+--------------------------------------------------------------------|
       |    1 | 使用者在shell环境中可以操作的指令或可执行文件                      |
       |    2 | 系统核心可调用的函数与工具等                                       |
       |    3 | 一些常用的函数(function)与函数库(library), 大部分为C的函数库(libc) |
       |    4 | 设备文件的说明, 通常在/dev下的文件                                 |
       |    5 | 配置文件或者某些文件的格式                                         |
       |    6 | 游戏(games)                                                        |
       |    7 | 惯例与协定等, 例如Linux文件系统、网络协定、ASCII code等等的说明    |
       |    8 | 系统管理员可用的管理指令                                           |
       |    9 | 跟kernel有关的文件                                                 |
     * man不同部分的说明:
       | 代号        | 内容说明                                                     |
       |-------------+--------------------------------------------------------------|
       | NAME        | 简短的指令、数据名称说明                                     |
       | SYNOPSIS    | 简短的指令下达语法(syntax)简介                               |
       | DESCRIPTION | 较为完整的说明, 这部分最好仔细看看                           |
       | OPTIONS     | 针对SYNOPSIS部分中, 有列举的所有可用的选项说明               |
       | COMMANDS    | 当这个程序(软件)在执行的时候, 可以在此程序(软件)中下达的指令 |
       | FILES       | 这个程序或数据所使用或参考或链接到的某些文件                 |
       | SEE ALSO    | 可以参考的, 跟这个指令或数据有相关的其他说明                 |
       | EXAMPLE     | 一些可以参考的范例                                           |
     * 查看步骤:
       1.先察看NAME的项目, 约略看一下这个数据的意思;
       2.详看DESCRIPTION, 提到相关数据与使用时机;
       3.OPTIONS, 查询选项的意义
       4.SEE ALSO
       5.FILES
     * 按键: 同VIM快捷键
     * 路径: man page默认存放在/usr/share/man目录, 可以通过/etc/man_db.conf修改
**** DONE 4.3.3 info page
     文字模式的网页显示数据
     #+begin_quote
     File: info.info, Node: Top, Next: Getting Started, Up: (dir)
     Info: An Introduction
     *********************
     The GNU Project distributes most of its manuals in the "Info format",
     which you read using an "Info reader".You are probably using an Info
     reader to read this now.
     There are two primary Info readers: ‘info’, a stand-alone program
     designed just to read Info files (*note What is Info?: (info-stnd)Top.),
     and the ‘info’ package in GNU Emacs, a general-purpose editor.At
     present, only the Emacs reader supports using a mouse.
     If you are new to the Info reader and want to learn how to use it,
     type the command ‘h’ now.It brings you to a programmed instruction
     sequence.
     To read about advanced Info commands, type ‘n’ twice.This brings
     you to ‘Advanced Info Commands’, skipping over the "Getting Started"
     chapter.
     Type ‘H’ to see a summary of all available commands.
     This file describes how to use Info, the menu-driven GNU
     documentation system.
     Copyright © 1989, 1992, 1996–2016 Free Software Foundation, Inc.
     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being "A GNU Manual, and with the Back-Cover Texts as in (a)
     below.A copy of the license is included in the section entitled
     "GNU Free Documentation License".
     (a) The FSF’s Back-Cover Text is: "You have the freedom to copy and
     modify this GNU manual."
     * Menu:
     * Getting Started::             Getting started using an Info reader.
     * Advanced::                    Advanced Info commands.
     * Further Reading::             Where to learn more about Info files.
     * GNU Free Documentation License::  The license for this documentation.
     * Index::                       An index of topics, commands, and variables.
     #+end_quote
     * 数据意义:
       * File: 代表这个info page的数据的来源文件;
       * Node: 代表目前的这个页面属于Top节点.意思是info.info内含有很多信息,
         而Top文件内的一个节点内容而已;
       * Next: 下一个节点的名称为Getting Started, 你也可以按"N"到下个节点去;
       * Up:  回到上一层的节点总揽画面, 你也可以按下"U"回到上一层;
       * Prev: 前一个节点.但由到Top是info.info的第一个节点, 所以上面没有前一个节点的信息.
     * 按键:
       | 按键        | 进行工作                                       |
       | [space]     | 向下翻一页                                     |
       | [Page Down] | 向下翻一页                                     |
       | [Page Up]   | 向上翻一页                                     |
       | [Tab]       | 在node之间移动, 有node的地方, 通常会以*显示.   |
       | [Enter]     | 当光标在node上面时, 按下Enter可以进入该node.   |
       | b           | 移动光标在node上面时, 按下Enter可以进入该node. |
       | e           | 移动光标到该info画面当中的第一个node处         |
       | n           | 前往下一个node处                               |
       | p           | 前往上一个node处                               |
       | u           | 向上移动一层                                   |
       | s (/)       | 在info page当中进行搜寻                        |
       | h, ?        | 显示求助菜单                                   |
       | q           | 结束这次的info page                            |
**** DONE 4.3.4 其他有用的文件(documents)
     =/usr/share/doc/=
     * =--help=
     * =man || info=
     * =/usr/share/doc=
     * 字典
*** DONE 4.4 超简单文书编辑器: nano [0/0]
    略
*** DONE 4.5 正确的关机方法 [0/0]
    * 关机注意事项:
      * 查看在线用户: =who=
        查看网络连接状态: =netstat -a=
        查看后台程序: =ps -aux=
      * 提示使用者将要关机: =shutdown=
      * 正确的关机指令: =shutdown= || =reboot=
    * 关机/开机相关指令:
      * 数据同步写入磁盘: =sync=
      * 惯用的关机指令: =shutdown=
      * 重新开机, 关机: =reboot=, =halt=, =poweroff=
        *Tips* Linux除了tty1~tty7可以用一般帐号关机, 某些distributions需要root密码
      * 数据同步写入磁盘: =sync=
    * =shutdown=:
      * 可以自由选择关机模式: 关机/重新开机 均可;
      * 可以设置关机时间: 立刻关机 || 特定时间关机
      * 自定关机讯息: 将关机讯息传递给线上user
      * 仅发警告讯息: 仅发送信息, 而不关机.
      #+begin_example
      shutdown [OPTIONS...] [TIME] [WALL...]
      Shut down the system.
           --help      Show this help
        -H --halt      Halt the machine
        -P --poweroff  Power-off the machine
        -r --reboot    Reboot the machine
        -h             Equivalent to --poweroff, overridden by --halt
        -k             Don't halt/power-off/reboot, just send warnings
           --no-wall   Don't send wall message before halt/power-off/reboot
        -c             Cancel a pending shutdown
      #+end_example
      #+begin_src bash
        shutdown -h now   #shutdown right now
        shutdown -h 20:25 #shutdown at the time of next 20:25
        shutdown -h +10   #shutdown after 10min
        shutdown -r now   #reboot right now
        shutdown -r +30   'The system will reboot' #reboot after 30min and send the message 'The system will reboot'
        shutdown -k now   'This system will reboot' #Just send the message 'This system will reboot' but do nothing.
      #+end_src
      * 一般重启指令 =sync; sync; sync; reboot=
    * 实际使用systemctl关机
      #+begin_example
      halt                            Shut down and halt the system
      poweroff                        Shut down and power-off the system
      reboot [ARG]                    Shut down and reboot the system
      suspend                         Suspend the system
      hibernate                       Hibernate the system
      hybrid-sleep                    Hibernate and suspend the system
      #+end_example
      #+begin_src bash
        systemctl reboot    #system reboot
        systemctl poweroff  #system poweroff
      #+end_src
*** DONE 4.6 重点回顾 [0/0]
    * 为了避免瞬间断电造成的Linux系统危害,
      建议作为服务器的Linux主机应该加上不断电系统来持续提供稳定的电力
    * 养成良好的操作习惯, 尽量不要使用root直接登录系统,
      应使用一般帐号登录系统, 有需要再转换身份
    * 可以通过"活动总览"查看系统所有使用的软件及快速启用惯用软件
    * 在X的环境下想要"强制"重新启动X的组合按键为
      @@html:<kbd>@@ <C-M-backspace> @@html:</kbd>@@(gnome only?)
    * 默认情况下, Linux提供tty1~tty6的终端机界面
    * 在终端机环境中, 可依据提示字符为$或#判断为一般帐号或root帐号
    * 取得终端机支持的语系数据可下达"=echo $LANG="或"=locale="指令
    * date可显示日期、cal可显示日历、bc可以做为计算机软件;
    * 组合按键中,
      @@html:<kbd>@@ <tab> @@html:</kbd>@@按键可作为(1)命令补齐或(2)文件名补齐或(3)参数选项补齐,
      @@html:<kbd>@@ <C-c> @@html:</kbd>@@可以中断目前正在运行中的程序;
    * Linux 系统上的英文大小写为不同的数据
    * 线上说明系统有man及info两个常见的指令;
    * man page说明后面的数字中, 1代表一般帐号可用指令,
      8代表系统管理员常用指令, 5代表系统配置文件格式;
    * info page可将一份说明文档拆成多个节点(node)显示, 并具有类似超链接的功能, 增 加易读性;
    * 系统需正确的关机比较不容易损坏, 可使用shutdown, poweroff等指令关机.
*** DONE 4.7 本章习题 [0/0]
    * =login:= 之前的欢迎画面
      1.=cat /etc/issue=
      #+begin_example
      Arch L inux \r (\l)
      #+end_example
      2.=man agetty=
      3.略
      4.时间:\t, tty号码:\l
    * 控制台:
      1.实体控制台:实体的屏幕、键盘、鼠标等界面, 让你可以使用该配备来操作系统的环境.
      2.虚拟控制台:由系统衍生出的虚拟控制台, 可以通过该虚拟控制台搭配自己系统的实体配备,
      来操作远端系统的环境.\\
      每个虚拟控制台都是独立运行的.
      3.终端机:你可以用该界面来取得一个可以控制系统的 shell 环境.\\
      大致都称为terminal
    * tty1~tty6的切换方式@@html:<kbd>@@ <C-M-f1>~<C-M-f6> @@html:</kbd>@@
    * 文件名区分大小写
    * 命令使用方式, =man cmd= || =info cmd= || =/usr/share/doc=
    * 设置1:30自动关机 =shutdown -h 1:30=
    * 重启X界面: @@html:<kbd>@@ <C-M-backspace> @@html:</kbd>@@
    * 查询指定日期是星期几 =cal x(月) y(年)=
    * 查询日期与时间参数并指定格式 =date +%Y/%m/%d-%H%M=
    * 切换Virtual console和X-Window: @@html:<kbd>@@ <C-M-f1> @@html:</kbd>@@
      回到X-Window, @@html:<kbd>@@ <C-M-f2>~<C-M-f6> @@html:</kbd>@@进入tty
    * @@html:<kbd>@@ <tab> @@html:</kbd>@@用途: 补全
    * 强制中断程序:@@html:<kbd>@@ <C-c> @@html:</kbd>@@
    * man page中, 指令/文件后数字的意义:
      1: 一般使用者可以使用的命令或可执行文件
      5: 一些配置文件的文件内容格式
      8: 系统管理员可以使用的管理指令
    * man page路径, =/usr/share/man= || =/usr/local/man=
    * 终端乱码: 语系设置不正确, =export LANG=en_US.utf8= || =export LC_ALL=en_US.uTF-8=
    * $ 代表一般用户, #代表root用户
*** DONE 4.8 参考资料与延伸阅读 [0/0]
** DONE 第五章 Linux的文件权限与目录配置 [6/6]
*** DONE 5.1 使用者与群组 [0/0]
*** DONE 5.2 Linux文件权限概念 [4/4]
**** DONE 5.2.1 文件属性
     =-rw-r--r--   1 zhoush         wheel    16684 2017-02-03 19:39 NOTE.ORG=
     * =-rw-r--r--=
       * 第一个字符表示了文件类型
         * d: 表示目录
         * -: 表示文件
         * l: 表示为链接文件
         * b: 表示为设备文件里面的可供存储的周边设备(可随机存取设备)
         * c: 表示为设备文件里的序列埠设备, 如键盘 鼠标(一次性读取设备)
       * 以三个为一组.[r]表示可读, [w]表示可写, [x]表示可执行.
         * 第一组为"文件拥有者可具备的权限"
         * 第二组为"群组帐号的权限"
         * 第三组为"非本人且未加入群组的其它帐号的权限"
     * 第二栏表示有多少个文件名链接到此节点(i-node):
       每个文件都会将它的权限与属性记录到文件系统的i-node中,
       因此每个文件名都会链接到一个i-node.
     * 第三栏表示这个文件(或目录)的"拥有者帐号"
     * 第四栏表示这个文件的所属群组
     * 第五栏为这个文件的容量大小, 默认单位为Bytes
     * 第六栏为这个文件的创建日期或者是最近的修改日期
       如果这个文件或修改的时间距离现在过久, 那么时间部分会仅显示年份而已,
       如需显示完整的时间格式, 可以 =ls -l --full-time=
     * 第七栏为这个文件的文件名
**** DONE 5.2.2 如何改变文件属性与权限
     * =chgrp=: 改变文件所属群组
     * =chown=: 改变文件拥有者
     * =chmod=: 改变文件的权限, SUID, SGID, SBIT等特性
       1.chmod 644 .bashrc
       2.chmod u=rwx, go=rx .bashrc
       3.chmod a-x .bashrc
**** DONE 5.2.3 目录与文件之权限的意义
     * 权限对目录的重要性
       * r (read contents in directory): 表示具有读取目录结构清单的权限
       * w (modify contents of directory): 表示具有改动该目录结构清单的权限
         * 创建新的文件与目录
         * 删除已经存在的文件与目录(不论该文件的权限为何)
         * 将已存在的文件或目录改名
         * 搬移该目录内的文件, 目录位置.(目录的w权限与该目录下面的文件改动有关)
       * x (access directory):表示使用者能否进入该目录成为工作目录
       | 元件 | 内容         | 叠代物件   | r            | w            | x            |
       | 文件 | 详细数据data | 文件数据夹 | 读取文件内容 | 修改文件内容 | 执行文件内容 |
       | 目录 | 文件名       | 可分类抽屈 | 读到文件名   | 修改文件名   | 进行该目录   |
     * 完成任务的最小权限
       * /dir1/file1
       * /dir2
       | 操作动作         | /dir1 | /dir1/file1 | /dir2 | 重点                            |
       | 读取file1        | x     | r           | -     | 需要能够进入/dir1               |
       | 修改file1        | x     | rw          | -     | 能够进入/dir1且可以修改file1    |
       | 执行file1        | x     | rx          | -     | 能够进入/dir1且file1可以运行    |
       | 删除file1        | wx    | -           | -     | 能够进入/dir1且具有目录修改权限 |
       | 复制file1到/dri2 | x     | r           | wx    | 能够读取file1且能够修改/dir2    |
**** DONE 5.2.4 Linux文件种类与扩展名
     * 文件种类
       * 正规文件(regular file): 就是一般我们在进行存取的类型的文件,
         * 纯文本文件(ASCII): 这是Linux系统中最多的一种文件类型, 文件内容可以直接读取
         * 二进制文档(binary): 可执行文件
         * 数据文档(data): 有些程序在运行的过程中要读取特定格式的文件,
           那些特定格式的文件都可以被称为数据文件, 如 [[/var/log/wtmp][/var/log/wtmp]]
       * 目录(directory): 就是目录, 第一个属性为[d]
       * 链接文件(link): 类似Windows系统下的快捷方式, 第一个属性为[l](英文L的小写)
       * 设备与设备文件(device): 系统周边及储存相关的文件, 通常在[[file:/dev][/dev]]目录下
         * 区块(block)设备文件: 储存数据, 以提供系统随机存取的周边设备
         * 字符(character)设备文件: 序列埠的周边设备, 如键盘、鼠标
       * 数据接口文件(sockets): 通常被用在网络上的数据承接.
         可以启动一个程序来监听用户端的要求, 用户端可以通过这个socket来进行数据沟通.
         第一个属性为[s], 最常在[[/run][/run]]或[[/tmp][/tmp]]目录中看到这种文件类型
       * 数据输送文件(FIFO, pipe): FIFO也是一种特殊的文件类型, 主要的目的在解决多个程序同时存取一个文件所造成
         的错误问题.FIFO是first-in-first-out的缩写.第一个属性为[p]
     * Linux文件扩展名
       Linux文件没有"扩展名", 但希望借助扩展名了解文件作用了
       * *.sh: 脚本或批处理文件(scripts), 因批处理文件通常由shell写就
       * Z, .tar, .tar.gz, .tgz: 经过打包的压缩文件.因压缩软件分别为gunzip, tar等
       * .html, .php: 网页相关文件, 分别代表HTML语法与PHP语法的网页文件,
         .html可使用网页浏览器直接打开,
         .php需要通过client端的浏览器的server端浏览
     * Linux文件长度限制
       * 最大容许文件名为255Bytes
     * Linux文件名称的限制, 避免使用特殊字符, 如下:
     #+ BEGIN_EXAMPLE
     ?><;&![]\'"`(){}
     #+ END_EXAMPLE
*** DONE 5.3 Linux目录配置 [4/4]
**** DONE 5.3.1 Linux目录配置的依据--FHS(Filesystem Hierachy Standard)
     |                             | 可分享的(sharable)          | 不可分享的(unsharable) |
     | 不变的(static)              | [[/usr][/usr]](软件放置处)            | [[/etc][/etc]](配置文件)         |
     | [[/opt][/opt]] (第三方协力软件)       | [[/boot][/boot]] (开机与核心文件)      |                        |
     | 可变动的 (variable)         | [[/var/mail][/var/mail]] (使用者邮件信息)  | [[/var/run][/var/run]] (程序相关)    |
     | [[/var/spool/news][/var/spool/news]] (新闻群组)  | [[/var/lock][/var/lock]] (程序相关)        |                        |
     类型说明:
     * 可分享的: 可以分享给其它系统挂载使用的目录, 包括可执行文件与使用者的邮件等数据
     * 不可分享的: 自己机器上面运行的设备文件或者是与程序有关的socket文件, 仅与自身机器有关
     * 不变的: 有些数据不会经常变动.如函数库、文件说明文档、系统管理员所管理的主机服务配置文件
     * 可变动的: 经常改变的数据, 如登录文件、一般用户可自地收受的新闻群组等.
     FHS针对目录树架构仅定义三层目录, 如下:
     * [[/var/run][/]] (root, 根目录) : 与开机系统有关
     * [[/usr][/usr]] (unix software resource): 与软件安装/执行有关
     * [[/var/run][/var]] (variable) : 与系统运行过程有关
     * 根目录 ([[/][/]]) 的意义与内容:\\
       FHS标准建议:根目录(/)所在分区应该越小越好,
       且应用程序所安装的软件最好不要与根目录放在同一个分区内.\\
       如此不但性能较佳, 根目录所在的文件系统也较不容易发生问题.\\
       因此FHS定义出根目录(/)下面应该要有下面这些次目录:
       | 目录                             | 应放置文件内容                                                         |
       | 第一部分:FHS要求必须要存在的目录 |                                                                        |
       | [[/bin][/bin]]                             | 单人维护模式下还能够被操作的指令.|
       |                                  | [[/bin][/bin]]下面的指令可以被root与一般帐号使用                                 |
       | [[/boot][/boot]]                            | 放置开机会使用到的文件, |
       |                                  | 包括Linux核心文件以及开机菜单与开机所需配置文件.|
       |                                  | Linux Kernel常用的文件名为:vmlinuz, grub开机管理程序会存在[[/boot/grub][/boot/grub]]   |
       | [[/dev/][/dev]]                             | 设备与周边设备都是以文件的形态存在于此目录.|
       |                                  | 比较重要的文件:[[/dev/null][/dev/null]], [[/dev/zero][/dev/zero]], [[/dev/tty][/dev/tty]], [[/dev/loop][/dev/loop]], [[/dev/sd][/dev/sd]]...|
       | [[/etc][/etc]]                             | 系统主要的配置文件.如帐号密码文件, 各种服务的起始文件.|
       |                                  | 一般用户可查询, 但只有root可修改.FHS建议不要放置可执行文件.|
       |                                  | 比较重要的文件:[[/etc/modprobe.d][/etc/modprobe.d]], [[/etc/passwd][/etc/passwd]], [[/etc/fstab][/etc/fstab]], [[/etc/issue][/etc/issue]]...|
       |                                  | FHS另外规范几个重要的目录:[[/etc/opt][/etc/opt]](必要)-第三方软件的相关配置文件      |
       |                                  | [[/etc/X11][/etc/X11]](建议):与X-Window有关的各种配置文件, 尤其是xorg.conf            |
       |                                  | [[/etc/sgml][/etc/sgml]](建议):与SGML格式有关的各项配置文件                           |
       |                                  | [[/etc/xml][/etc/xml]](建议):与XML格式有关的各项配置文件                             |
       | [[/media][/media]]                           | 可移动设备, 包括软盘, 光盘, DVD等设备                                     |
       |                                  | 常用文件名:[[/media/floppy][/media/floppy]], [[/media/cdrom][/media/cdrom]]...|
       | [[/mnt][/mnt]]                             | 额外设备, 与[[/media][/media]]相同, 这个目录作为暂时挂载                           |
       | [[/opt][/opt]]                             | 第三方软件放置的目录.自行安装额外的软件(非原distribution提供).|
       |                                  | 以前的Linux系统中, 习惯放置在[[/usr/local][/usr/local]]目录                             |
       | [[/run][/run]]                             | 早期[[/var/run][/var/run]], 新版FHS规范到[[/run][/run]].|
       |                                  | 由于[[/run][/run]]可以使用内存访问, 性能更佳                                      |
       | [[/sbin][/sbin]]                            | 只有root有权使用设置系统, 其他帐号只能查询.|
       |                                  | 服务器软件程序放置到[[/usr/sbin][/usr/sbin]]                                          |
       |                                  | 自行安装的软件所产生的系统可执行文件放置到[[/usr/local/sbin][/usr/local/sbin]]              |
       |                                  | 常见的指令:fdisk, fsck, ifconfig, mkfs...|
       | [[/srv][/srv]]                             | 可视为"service"的缩写, 网络服务启动后, 所需取用的数据目录.|
       |                                  | 常见的服务:WWW, FTP.WWW需要的网页数据可放置在[[/srv/www][/srv/www]]                 |
       |                                  | 未提供给网络任何人浏览, 默认仍建议[[/var/lib][/var/lib]]                              |
       | [[/tmp][/tmp]]                             | 让一般使用者或者正在执行的程序暂时放置文件.|
       |                                  | 任何人都可存取, 所以需要定期清理.|
       |                                  | *重要数据不可放置在此目录*                                             |
       |                                  | /FHS建议开机时将[[/tmp][/tmp]]下数据都删除/                                      |
       | [[/usr][/usr]]                             | 第二层FHS设置, 后续介绍                                                |
       | [[/var][/var]]                             | 第二层FHS设置, 主要为放置变动性的变量, 后续介绍                          |
       | 第二部分:FHS建议可以存在的目录   |                                                                        |
       | [[/home][/home]]                            | 系统默认的使用者主文件夹(home directory).|
       |                                  | 新增一般帐号时, 默认的主文件夹都会规范到这里.|
       |                                  | 两种代号:~:目前使用者的主文件夹, dmtsai:dmtsai的主文件夹               |
       | [[/lib][/lib<qual>]]                       | 存放与[[/lib][/lib]]不同格式的二进制函数库, 如[[/lib64][/lib64]]                              |
       | [[/root][/root]]                            | 系统管理员(root)的主文件夹.|
       |                                  | 单人维护模式仅挂载根目录时, 就能够拥有root的主文件夹                    |
       Linux中比较重要的目录:
       | 目录        | 应放置文件内容                                                                           |
       | [[/lost+found][/lost+found]] | 标准的ext2/ext3/ext4文件格式系统才会产生的目录, |
       |             | 目的在于文件系统发生错误时, 将遗失的片段放置本目录                                        |
       | [[/proc][/proc]]       | "虚拟文件系统(virtual filesystem)", 放置的数据都在内存, |
       |             | 如系统核心, 进程信息(process), 周边设备的状态及网络状态.本身不占用硬盘空间.|
       |             | 比较重要的文件:[[/proc/cpuinfo][/proc/cpuinfo]], [[/proc/dma][/proc/dma]], [[/proc/interrupts][/proc/interrupts]], [[/proc/ioports][/proc/ioports]], [[/porc/net/*][/proc/net/*]]...|
       | [[/sys][/sys]]        | 是虚拟文件系统, 不占用硬盘空间.|
       |             | 记录核心与系统硬件信息较相关的信息.包括已载入的核心模块与核心侦测到的硬件设备信息        |
     * [[/usr][/usr]](unix system resource)的意义与内容:
       放置的数据属于可分享的与不可变动的(sharable, static), \\
       FHS建议所有软件开发者: 应该将他们的数据合理的分别放置到这个目录, \\
       而不要自行创建该软件自己独立的目录.\\
       [[/usr][/usr]]的次目录建议有下面这些:
       | 目录                              | 应放置文件内容                                                           |
       | 第一部分: FHS要求必须要存在的目录 |                                                                          |
       | [[/usr/bin][/usr/bin]]                          | 所有一般用户能够使用的指令都放在这里, 与[[/bin][/bin]]相同)                        |
       |                                   | FHS要求此目录下不应该有子目录                                            |
       | [[/usr/lib][/usr/lib]]                          | 基本上, 与[[/lib][/lib]]功能相同, 所以[[/lib][/lib]]就是链接到此目录                           |
       | [[/usr/local][/usr/local]]                        | 系统管理员自行安装下载的软件, 该目录下也具有bin, etc, include, lib...次目录 |
       | [[/usr/sbin][/usr/sbin]]                         | 非系统正常运行所需要的指令(与[[/usr/sbin][/sbin]]相同)                                  |
       | [[/usr/share][/usr/share]]                        | 主要旋转只读架构的数据文件, 包括共享文件.|
       | 第二部分:FHS建议可以存在的目录    |                                                                          |
       | [[/usr/games][/usr/games]]                        | 与游戏比较相关的数据                                                     |
       | [[/usr/include][/usr/include]]                      | c/c++等程序语言的头文件                                                  |
       | [[/usr/libexec][/usr/libexec]]                      | 不被一般使用者惯用的可执行文件或脚本.如X-Window下的操作指令              |
       | [[/usr/lib<qual>][/usr/lib<qual>]]                    | 与[[/usr/lib<qual>][/lib<qual>]]相同                                                         |
       | [[/usr/src][/usr/src]]                          | 源代码, src=source, 核心源代码建议旋转到[[/usr/src/linux][/usr/src/linux]]目录                |
     * [[/var][/var]]的意义与内容:
       在系统运行后渐渐占用硬盘容量.主要针对常态性变动的文件, \\
       包括高速缓存(cache), 登录文件(log file)以及某些软件运行所产生的文件, \\
       包括程序文件(lock file, run file), 或者mysql数据库的文件等.常见的次目录有:
       | 目录                             | 应放置文件内容                                                             |
       | 第一部分:FHS要求必须要存在的目录 |                                                                            |
       | [[/var/cache][/var/cache]]                       | 应用程序本身运行过程中产生的一些暂存盘                                     |
       | [[/var/lib][/var/lib]]                         | 程序本身执行的过程中, 需要使用到的数据文件放置的目录.|
       | [[/var/lock][/var/lock]]                        | 资源锁目录.目前此目录挪到[[/run/lock][/run/lock]]                                         |
       | [[/var/log][/var/log]]                         | 登录文件放置的目录.|
       |                                  | 重要的文件:[[/var/log/messages][/var/log/messages]], [[/var/log/wtmp][/var/log/wtmp]](记录登录者的信息)...|
       | [[/var/mail][/var/mail]]                        | 个人电子邮件信箱的目录, 这个目录也被放置到[[/var/spool/mail][/var/spool/mail]]目录               |
       | [[/var/run][/var/run]]                         | 程序或服务启动后, PID存放目录, 与[[/var/run][/run]]相同                                    |
       | [[/var/spool/mail][/var/spool]]                       | 伫列数据, 即排队等待其它程序使用的数据, 通常使用后会被删除.|
       |                                  | 例:收到邮件后会放置到[[/var/spool/mail][/var/spool/mail]], 使用者收下后就会删除.|
       |                                  | 寄不出去会放到[[/var/spool/mqueue][/var/spool/mqueue]], 送出后会删除, 工作调度会放到[[/var/spool/cron][/var/spool/cron]] |
     * 针对FHS, 各家distributions的异同, 与CentOS7的变化
**** DONE 5.3.2 目录树(directory tree)
     * 目录树的起始点为根目录([[/][/]], root);
     * 每一个目录不止能使用本地端的partition的文件系统, 也可以使用网络上的filesystem.
       例:可以利用 Network File System(NFS)服务器挂载某特定目录等.
     * 每一个文件在此目录树中的文件名(包含完整路径)都是独一无二的.
     #+begin_src bash
       ~/S/Practice/vbird_linux_basic λ ls -l /
       total 24
       lrwxrwxrwx   1 root           root         7 2016-12-06  2016 bin -> usr/bin
       drwxr-xr-x   4 root           root     16384 1970-01-01  1970 boot
       drwxr-xr-x   1 root           root        14 2016-11-15  2016 data
       drwxr-xr-x  21 root           root      3480 2017-02-04 12:23 dev
       drwxr-xr-x   1 root           root      2796 2017-01-26 18:10 etc
       drwxr-xr-x   1 root           root        24 2016-11-06  2016 home
       lrwxrwxrwx   1 root           root         7 2016-12-06  2016 lib -> usr/lib
       lrwxrwxrwx   1 root           root         7 2016-12-06  2016 lib64 -> usr/lib
       drwxr-xr-x   1 root           root        56 2016-11-23  2016 mnt
       drwxr-xr-x   1 root           root        76 2016-12-31  2016 opt
       dr-xr-xr-x 259 root           root         0 2017-02-04 12:23 proc
       drwxr-x---   1 root           root       336 2017-02-03 21:36 root
       drwxr-xr-x  19 root           root       520 2017-02-04 12:23 run
       lrwxrwxrwx   1 root           root         7 2016-12-06  2016 sbin -> usr/bin
       drwxr-xr-x   1 root           root        14 2015-10-01  2015 srv
       dr-xr-xr-x  13 root           root         0 2017-02-04 12:23 sys
       drwxrwxrwt  16 root           root       480 2017-02-04 17:44 tmp
       drwxr-xr-x   1 root           root        80 2016-12-29  2016 usr
       drwxr-xr-x   1 root           root       122 2016-12-12  2016 var
     #+end_src
     #+CAPTION: 目录树架构示意图
     #+NAME: 目录树架构示意图
     [[/home/zhoush/Srcs/Practice/vbird_linux_basic/目录树架构示意图.png]]
**** DONE 5.3.3 绝对路径与相对路径
     * 绝对路径: 由根目录([[/][/]])开始写起的文件名或目录名称, 如[[/home/zhoush/.bashrc][/home/zhoush/.bashrc]]
     * 相对路径: 相对于目前路径的文件名写法, 如[[./home/zhoush][./home/zhoush]]
       * .: 代表当前的目录, 也可以用./表示
       * ..: 代表上一层目录, 也可以用../表示
**** DONE 5.3.4 CentOS的观察
*** DONE 5.4 重点回顾 [0/0]
    * Linux的每个文件, 可分别给使用者, 群组与其他人不同的rwx权限;
    * 群组最有力的功能之一, 就是当你在团队开发资源的时候, 且每个帐号都可以拥有多个群组的支持
    * 利用 =ls -l= 显示的文件属性中, 第一个字段是文件的权限, 共10位, 第一个位是文件类型, 接下来三个一组为权限
    * 如果文件名之前多一个".", 代表这个文件为隐藏文件
    * 需要root权限时可以使用 =su -= 切换身份, 处理完毕使用 =exit= 或@@html:<kbd>@@ C-d @@html:</kbd>@@离开环境, =sudo= 获取临时root权限.
    * 更改文件的群组支持可用 =chgrp=, 修改文件的拥有者可用 =chown=, 修改文件的权限可用 =chmod=.
    * =chmod= 修改权限的方法有w丙种, 分别为符号法和数字法, 数字法中r, w, x分别为4, 2, 1;
    * 对文件来说, 权限的表现为:
      * r: 可读, 可查文件内容
      * w: 可写, 可以增, 删, 改文件内容
      * x: 可执行文件
    * 对目录来说, 权限的表现为:
      * r: 可读, 查询目录
      * w: 可写, 可以增, 删, 改文件
      * x: 可进入目录
    * 要开发目录给任何人浏览时, 应该至少给r, x权限, 但w权限需要谨慎
    * 能否读取某个文件内容, 和文件所在目录的权限也有关系(目录至少需要有x的权限).
    * Linux的文件名限制为:单一文件或目录的最大允许文件名为255Bytes(255个英文字符)
    * 根据FHS官方文件指出, 希望让使用者可以了解到已安装软件通常放置于哪个目录
    * FHS的四种目录特色:sharable, unsharable, static, variable
    * FHS定义的三层主目录: [[/][/]], [[/var][/var]], [[/usr][/usr]]
    * 绝对路径文件名要从根目录[[/][/]]开始, 否则是相对路径的文件名.
*** DONE 5.5 本章练习 [0/0]
    * 文件名长度限制:  255字符
    * 文件权限-rwxrwxrwx的意义:  任何人皆可读, 可写, 可执行, 但不一定能删除
    * 将文件权限修改为-rwxr-xr--的指令:  =chmod 754 filename= 或 =chmod u=rwx, g=rx, o=r filename=
    * 更改文件的拥有者与群组指令:  =chown=, =chgrp=
    * 下面的目录主要放置数据:
      * [[/etc/][/etc]]: 几乎系统所有设置文件, 尤其[[/etc/passwd][passwd]], [[/etc/shadow][shadow]]
      * [[/boot][/boot]]: 开机配置文件, 也是默认存放核心vmlinuz的位置
      * [[/usr/bin][/usr/bin]]: 一般可执行文件
      * [[/usr/bin][/bin]]: 一般可执行文件
      * [[/usr/bin][/sbin]]: 系统管理员常用指令集
      * [[/dev][/dev]]: 系统管理员常用指令集
      * [[/var/log][/var/log]]: 系统登录文件
      * [[/run][/run]]: 经常变动的项目 (每次开机都不同, 如程序的PID) 移动到内存,
        所以[[/run][/run]]不占用实际硬盘
*** DONE 5.6 参考资料与延伸阅读 [0/0]
    1.[[http://en.wikipedia.org/wiki/Comparison_of_file_systems][各种文件系统的文件名长度限制, 维基百科:]]
    2.[[http://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard][FHS标准的相关说明: 维基百科简易说]]
    [[http://www.pathname.com/fhs/pub/fhs-2.3.html][FHS2.3 (2004年版) 的标准文件]]
    [[http://refspecs.linuxfoundation.org/FHS_3.0/fhs-3.0.pdf][FHS3.0 (2015年版) 的标准文件]]
** DONE 第六章 Linux文件与目录管理 [8/8]
*** DONE 6.1 目录与路径 [3/3]
**** DONE 6.1.1 相对路径与绝对路径
     * 相对路径的用途:
       目录层次较深, 较大关联间的目录操作
     * 绝对路径的用途:
       文件名的正确性较好
**** DONE 6.1.2 目录的相关操作
     #+begin_example
     .代表此层目录
     ..代表上一层目录
     -          代表前一个工作目录
     ~          代表目前使用者的主文件夹
     ~account   代表account使用者的主文件夹
     #+end_example
     常见的处理目录的指令:
     * =cd=: 变换目录
     * =pwd=: 显示目前所在绝对路径
     * =mkdir=: 创建新目录
     * =rmdir=: 删除空目录
**** DONE 6.1.3 关于可执行文件路径的变量: $PATH
     * 不同身份使用者默认的PATH不同, 默认能够随意执行的指令也不同
     * PATH可修改 ( =export PATH= )
     * 使用绝对路径或相对路径直接指定指令的文件名执行, 会比搜寻PATH正确性更高
     * 指令放在正确的目录下, 执行才会比较方便
     * 当前目录 (.) 最好不要放到PATH中
*** DONE 6.2 文件与目录管理 [3/3]
**** DONE 6.2.1 文件与目录检视: =ls=
     =ls --help= 查看用法
**** DONE 6.2.2 复制、删除与移动: =cp=, =rm=, =mv=
     * =cp= 需要注意:
       * 是否需要完整的保留来源文件的信息
       * 来源是否为链接文件 (symbolic link file)?
       * 来源文件是否为特殊的文件, 如FIFO, socket等?
       * 来源文件是否为目录
     * =rm= (移除文件或目录)
       删除"-aaa-"目录: =rm -- -aaa-=
     * =mv= (移动文件与目录或更名)
**** DONE 6.2.3 取得路径的文件名称与目录名称
     * =basename=
       #+begin_example
       /usr/bin/basename /home/zhoush/Projects/
       Projects
       #+end_example
     * =dirname=
       #+begin_example
       /usr/bin/dirname /home/zhoush/Projects/
       /home/zhoush
       #+end_example
*** DONE 6.3 文件内容查阅 [5/5]
    * =cat= 由第一行开始显示文件内容
    * =tac= 从最后一行开始显示, =cat= 倒写
    * =nl= 显示时输出行号
    * =more= 一页一页显示文件内容
    * =less= 与 =more= 类似, 但可以向前翻页
    * =head= 只看前几行
    * =tail= 只看尾几行
    * =od= 以二进制方式读取文件内容
**** DONE 6.3.1 直接检视文件内容
**** DONE 6.3.2 可翻页检视
     * =more=
       * @@html:<kbd>@@ SPC @@html:</kbd>@@: 代表向下翻一页
       * @@html:<kbd>@@ Enter @@html:</kbd>@@: 向下翻一行
       * @@html:<kbd>@@ /字符串 @@html:</kbd>@@: 查询指定字符串
       * @@html:<kbd>@@ :f @@html:</kbd>@@: 显示文件名及当前行数
       * @@html:<kbd>@@ q @@html:</kbd>@@: quit, 离开 =more=
       * @@html:<kbd>@@ b @@html:</kbd>@@或@@html:<kbd>@@ C-b @@html:</kbd>@@: 只对文件有用, 对管线无用
     * =less=
       * @@html:<kbd>@@ SPC @@html:</kbd>@@: 向下翻动一页;
       * @@html:<kbd>@@ <next> @@html:</kbd>@@: 向下翻动一页;
       * @@html:<kbd>@@ <prior> @@html:</kbd>@@: 向上翻动一页;
       * @@html:<kbd>@@ /字符串 @@html:</kbd>@@: 向下查询指定字符串
       * @@html:<kbd>@@ ?字符串 @@html:</kbd>@@: 向上查询指定字符串
       * @@html:<kbd>@@ n @@html:</kbd>@@: 重复前一个搜寻 (与 / 或 ? 有关!)
       * @@html:<kbd>@@ N @@html:</kbd>@@: 反向的重复前一个搜寻 (与 / 或 ? 有关!)
       * @@html:<kbd>@@ g @@html:</kbd>@@: 前进到这个数据的第一行去;
       * @@html:<kbd>@@ G @@html:</kbd>@@: 前进到这个数据的最后一行去 (注意大小写);
       * @@html:<kbd>@@ q @@html:</kbd>@@: quit, 离开 =less=
**** DONE 6.3.3 数据撷取: =head=, =tail=
**** DONE 6.3.4 非纯文件文件: =od=
**** DONE 6.3.5 修改文件时间或创建新文件: =touch=
     最常使用的情况:
     * 创建空文件
     * 将文件的时间修为当前(mtime与atime)
*** DONE 6.4 文件与目录的默认权限与隐藏权限 [4/4]
    =chattr= 与 =lsattr=
**** DONE 6.4.1 文件默认权限: =umask=
     默认情况如下:
     * 若使用者创建为"文件", 则默认没有可执行(x)权限, 即只有rw,
       也就是最大为666, 默认权限为:-rw-rw-rw-
     * 若使用者创建为"目录", 则由于x决定是否可以进入目录,
       默认所有权限均开放, 也就是777, 默认权限为:-rwxrwxrwx
**** DONE 6.4.2 文件隐藏属性
     * =chattr= (设置文件隐藏属性)
       =man chattr=, =man btrfs-man5=
     * =lsattr=
       =man lsattr=
**** DONE 6.4.3 文件特殊权限:SUID, SGID, SBIT
     * Set UID
       * SUID权限仅对二进制程序有效
       * 执行者对于该程序需要具有x的可执行权限
       * 本权限仅在执行该程序的过程中有效
       * 执行者将具有该程序拥有者(owner)的权限
       * 举例如下:
         1.dmtsai对于/usr/bin/passwd具有x权限, 表示dmtsai可以执行passwd
         2.passwd的拥有者是root帐号
         3.dmtsai执行passwd的过程中, 会 *暂时* 获得root权限
         4./etc/shadow就可以被dmtsai所执行的passwd所修改.
         但 =cat= 不具有SUID权限, 所以dmtsai不能通过 =cat= 读取/etc/shadow内容.
     * Set GID
       * SGID对二进制程序有用:
         * 程序执行者对于该程序来说, 需具备x的权限;
         * 执行者在执行的过程中将会获得该程序群组的支持
         * 使用一般用户执行locate时, 将会取得locate群组的支持
         * 举例如下:
           #+begin_src bash
             ls -l /usr/bin/locate
             -rwxr-sr-x   1 root           locate      39520 2014-12-15  2014 /usr/bin/locate
           #+end_src
       * SGID对目录的作用:
         * 使用者若对此目录具有rx权限, 使用者能够进入此目录
         * 使用者在此目录下的有效群组(effective group) 将会变成该目录的群组
         * 用途: 若使用者在此目录下具有w的权限(可以新建文件),
           则使用者所创建的新文件的群组与此目录的群组相同.
     * Sticky Bit
       SBIT目前只针对目录有效.
       * 当使用者对于此目录具有wx权限
       * 当使用者在该目录下创建文件或目录时, 仅自己与root才有权力删除该文件(如[[/tmp][/tmp]]).
       * 测试:
         1.以 root 登陆系统, 并且进入 /tmp 当中;
         2.touch test, 并且更改 test 权限成为 777 ;
         3.以一般使用者登陆, 并进入 /tmp;
         4.尝试删除 test 这个文件!
     * SUID/SGID/SBIT权限设置:
       * 4为SUID
       * 2为SGID
       * 1为SBIT
**** DONE 6.4.4 观察文件类型: =file=
*** DONE 6.5 指令与文件的搜寻 [2/2]
**** DONE 6.5.1 指令文件的搜寻
     * =which= (寻找"可执行文件")
       #+begin_src bash
         /usr/bin/which ifconfig
         /usr/bin/ifconfig
       #+end_src
     * =history=
     * =type=
**** DONE 6.5.2 文件文件名的搜寻
     * =whereis= (由一些特定的目录中寻找文件文件名)
       #+begin_src bash
         /usr/bin/whereis ifconfig
         ifconfig: /usr/bin/ifconfig /usr/share/man/man8/ifconfig.8.gz
       #+end_src
     * =locate / updatedb=
     * =find=
       =man find=
*** DONE 6.6 极重要的复习! 权限与指令间的关系 [0/0]
*** DONE 6.7 重点回顾 [0/0]
    * 绝对路径: 一定由根目录[[/etc/group][/]]写起；相对路径:不由[[/etc/group][/]]写起, 而是由相对当前目录写起
    * 特殊目录有: ., .., -, ~, ~zhoush
    * 与目录相关指令有: =cd=, =mkdir=, =rmdir=, =pwd= 等重要指令
    * =rmdir= 仅能删除空目录, 要删除非空目录需要使用"=rm -r="指令
    * 使用者能使用的指令是依据PATH变量所规定的目录去搜寻的
    * =ls= 可以检视文件的属性, 尤其-d, -a, -l等选项特别重要!
    * 文件的复制, 删除, 移动可以分别使用: =cp=, =rm=, =mv=等命令
    * 检查文件的内容(读文件)可使用的指令包括有: =cat=, =tac=, =nl=, =more=, =less=, =head=, =tail=, =od= 等
    * =cat -n= 与 =nl= 均可显示行号, 但默认的情况下, 空白行会不会编号并不相同;
    * =touch= 的目的在修改文件的时间参数, 但也可以用来创建空文件;
    * 一个文件记录的时间参数有三种:
      分别是access time(atime), statu stime(ctime), modification time(mtime),
      ls默认显示mtime
    * 除了传统的rwx权限之外, extX/xfs文件系统中, 还可以使用chattr与lsattr设置及观察隐藏属性.
    * 新建文件/目录时, 新文件的默认权限使用umask来规范.
      默认目录完全权限为drwxrwxrwx, 文件为-rw-rw-rw-
    * 文件具有SUID的特殊权限时, 使用者执行此程序时, 在执行过程中使用者会暂时具有程序拥有者的权限
    * 目录具有SGID的特殊权限时, 使用者在这个目录下面新建的文件群组都会与该目录的相同
    * 目录具有SBIT的特殊权限时, 使用者在该目录下使用者创建的文件只有自己与root能够删除
    * 观察文件的类型可以使用 =file= 指令
    * 搜寻指令的完整文件名可用 =which= 或 =type=
    * 搜寻文件的完整文件名可用 =whereis= 查询特定目录或使用 =locate= 到数据库中查询
    * 利用 =find= 可以加入许多选项参数查询文件系统
*** DONE 6.8 本章习题 [0/0]
** DONE 第七章 Linux磁盘与文件系统管理 [7/7]
*** DONE 7.1 认识Linux文件系统 [9/9]
**** DONE 7.1.1 磁盘组成与分区的复习
     * 磁盘的物理组成
       * 圆形的盘片(记录数据)
       * 机械手臂, 与在机械手臂上的磁头(读写盘片上的数据)
       * 主轴马达, 可以转动盘片, 让机械手臂的磁头在盘片上读写数据
     * 盘片的物理组成
       * 扇区(Sector)为最小的物理存储单位, 且依据磁盘设计不同, 主要有512Bytes与4K两种方式
       * 扇区组成一个圆 , 是柱面(Cylinder)
       * 早期以柱面为最小分区单位, 现在通常使用扇区为最小分区单位
       * 磁盘分区表主要有两种格式, MBR && GPT
       * MBR分区表中, 第一个扇区最重要, 里面有:
         1.主要开机区(Master boot record, MBR)及分区表(partition table),
         MBR占446Bytes, partition table占64Bytes
       * GPT分区表除了分区数量扩充较多之外, 支持的磁盘容量也可以超过2TB
**** DONE 7.1.2 文件系统特性
     * superblock: 记录filesystem的整休信息, 包括inode/block的总量, 使用量, 剩余量,
       以及文件系统的格式与相关信息.
     * inode: 记录文件的属性, 一个文件占用一个inode, 同时记录此文件的数据所在的block号码
     * block: 实际记录文件的内容, 若文件太大时, 会占用多个block.
**** DONE 7.1.3 Linux的EXT2文件系统(inode)
     Ext2文件系统的block限制:
     * data block(数据区块)
       | block大小          | 1KB  | 2KB   | 4KB  |
       | 最大单一文件限制   | 16GB | 256GB | 2TB  |
       | 最大文件系统总容量 | 2TB  | 8TB   | 16TB |
       * 原则上, block的大小与数量在格式化完就不能够再改变了(除非重新格式化)
       * 每个block内最多只能够旋转一个文件的数据
       * 承上, 如果文件大于block的大小, 则一个文件会占用多个block的数量;
       * 承上, 若文件小于block, 则该block的剩余容量就不能够再被使用了!(磁盘空间会浪费)
     * inode table(inode表格)
       inode记录的文件数据:
       * 该文件的存取模式(read/write/excute)
       * 该文件的拥有者与群组(owner/group)
       * 该文件的容量
       * 该文件创建或状态改变的时间(ctime)
       * 最近一次的读取时间(atime)
       * 最近修改时间(mtime)
       * 定义文件特性的旗标(flag), 如SUID...
       * 该文件真正内容的指向(pointer)
       inode的特色
       * 每个inode大小均固定为128Bytes(新的ext4/xfs可设置到256Bytes)
       * 每个文件都会占用一个inode而已
       * 承上, 文件系统能够创建的文件数量与inode数量有关
       * 系统读取文件时需要先找到inode, 并分析inode所记录的权限与使用者是否符合,
         符合才能够实际开始读取block内容.
     * superblock(超级区块)
       superblock是记录整个filesystem相关信息的地方,
       没有superblock就没有这个filesystem, 数据:
       * block与inode的总量
       * 未使用与已使用的inode/block数量
       * block与inode的大小(block为1, 2, 4K, inode为128Bytes或256Bytes)
       * filesystem的挂载时间, 最近一次写入数据的时间,
         最近一次检查磁盘(fsck)的时间等文件系统相关信息
       * 一个valid bit数值, 若此文件系统已被挂载, 则valid bit为0, 若未被挂载为1
     * Filesystem Description(文件系统描述说明)
     * block bitmap(区块对照表)
     * inode bitmap(inode对照表)
     * dumpe2fs:查询Ext家族 superblock信息的指令
**** DONE 7.1.4 与目录树的关系
     * 目录
       创建一个目录时, 文件系统会分配一个inode与至少一块block给该目录.
       =ls -il= 查询inode号码
**** DONE 7.1.5 EXT2/EXT3/EXT4文件的存取与日志式文件系统的功能
     新增一个文件, 文件系统的行为是:
     1.先确定使用者对于欲新增文件的目录是否具有w与x权限, 有的话才能新增
     2.根据inode bitmap找到没有使用的inode号码, 并将新文件的权限/属性写入
     3.根据block bitmap找到没有使用的block号码, 并将实际的数据写入block当中,
     且更新inode的block指向数据
     4.将刚刚写入的inode与block数据同步更新inode bitmap与block bitmap,
     并更新superblock内容
     * 数据的不一致(inconsistent)状态
       文件在写入文件系统时异常系统中断,
       同步更新中介数据的步骤没有做完就会导致metadata的内容与实际数据存放区产生不一致
     * 日志式文件系统(Journaling filesystem)
       简化一致性检查步骤:
       1.预备:当系统要写入一个文件时, 会先在日志记录区块中纪录某个文件准备要写入的信息
       2.实际写入:开始写入文件的权限与数据; 开始更新metadata的数据
       3.结束: 完成数据与metadata的更新后, 在日志记录区块当中完成该文件的纪录
**** DONE 7.1.6 Linux文件系统的运行
     * 系统会将常用的文件数据旋转到内存的缓冲区, 以加速文件系统的读写;
     * 承上, 因此Linux的实体内存最后都会被用光, 这是正常情况, 可加速系统性能
     * 可以手动sync来强迫内存中设置为Dirty的文件回写到磁盘中
**** DONE 7.1.7 挂载点的意义(mount point)
     *挂载点一定是目录, 该目录为进入该文件系统的入口.*
**** DONE 7.1.8 其他Linux支持的文件系统与VFS
     * 常见支持的文件系统有:
       * 传统文件系统: ext2/minix/MS-DOS/FAT(用vfat模块)/iso9660(光盘) 等等
       * 日志文件系统: ext3/ext4/ReiserFS/Windows' NTFS/IBM's JFS/SGI's XFS/ZFS
       * 网络文件系统: NFS/SMBFS
     * 查看Linux支持的文件系统: =ls -l /lib/modules/$(uname -r)/kernel/fs=
     * 已载入内存中支持的文件系统: =cat /proc/filesystems=
     * Linux VFS(Virtual Filesystem Switch)
**** DONE 7.1.9 XFS文件系统简介
     * EXT家族缺陷: 支持度最广, 但格式化超慢
     * XFS文件系统的配置
       * 数据区 (data section)
         inode/data block/superblock都放置在这个区块.也分为多个储存区群组(allocation groups).
         包含:(1)整个文件系统的superblock (2) 剩余空间的管理机制 (3)inode的分配与追踪.
         此外, inode与Block都是系统需要用到时才动态配置产生, 所以格式化动作超级快!
       * 文件系统活动登录区(log section)
         主要用来纪录文件系统的变化
       * 实时运行区(realtime section)
         当有文件要被创建时, xfs会在这个区段里面找到一个到数个extent区块,
         将文件放置在这个区块内, 等到分配完毕后, 再写入到data section的inode与block.
     * XFS文件系统的描述数据观察
*** DONE 7.2 文件系统的简单操作 [2/2]
**** DONE 7.2.1 磁盘与目录的容量
     * =df=: 列出文件系统的整体磁盘使用量
     * =du=: 评估文件系统的磁盘使用量(常用在推估目录所占容量)
**** DONE 7.2.2 实体链接与符号链接: =ln=
     * Hard Link(实体链接, 硬链接或实际链接)
       * 每个文件都会占用一个inode, 文件内容由inode的记录来指向
       * 想要读取该文件, 必须要经过目录记录的文件名来指向到正确的inode号码才能读取
       限制:
       * 不能跨Filesystem
       * 不能link目录
     * Symbol Link (符号链接, 亦即是捷径)
     * 关于目录的link数量:
       * [[/tmp/testing][/tmp/testing]]
       * [[/tmp/testing/.][/tmp/testing/.]]
       * [[/tmp/testing/..][/tmp/testing/..]]
*** DONE 7.3 磁盘的分区, 格式化, 检验与挂载 [6/6]
**** DONE 7.3.1 观察磁盘分区状态
     * =lsblk= 列出系统上的所有磁盘列表
       NAME: 设备的文件名
       MAJ:MIN: 核心认识的设备通过这两个代码来熟悉的, 分别是主要:次要设备代码
       RM: 是否为可卸载设备(removable device), 如光盘, USB磁盘等
       SIZE: 容量
       RO: 是否为只读设备
       TYPE: 磁盘(disk), 分区(partition)或只读存储器(ROM)等输出
       MOUNTPOINT: 挂载点
     * =blkid= 列出设备的UUID等参数
     * =parted= 列出磁盘的分区表类型与分区信息
**** DONE 7.3.2 磁盘分区: =gdisk/fdisk=
     *MBR 分区表请使用 fdisk 分区, GPT 分区表请使用 gdisk 分区*
     * =gdisk=
**** DONE 7.3.3 磁盘格式化(创建文件系统)
     * mkfs
**** DONE 7.3.4 文件系统检验
     * xfs_repair处理XFS文件系统
     * fsck.ext4处理ext4文件系统
**** DONE 7.3.5 文件系统挂载与卸载
     * 单一文件系统不应该被重复挂载在不同的挂载点(目录)中;
     * 单一目录不应该重复挂载多个文件系统
     * 要作为挂载点的目录, 理论上应该都是空目录
**** DONE 7.3.6 磁盘/文件系统参数修订
     * =mknod=
     * =xfs_admin= 修改XFS文件系统的UUID与Label name
     * =tune2fs= 修改ext4的Label name与UUID
*** DONE 7.4 设置开机挂载 [2/2]
**** DONE 7.4.1 开机挂载/etc/fstab 及/etc/mtab
     * 根目录[[/][/]]是必须挂载的, 而且一定要先于其它mount point被挂载进来
     * 其它mount point必须为已创建的目录, 可任意指定, 但一定要遵守必须的系统目录架构原则(FHS)
     * 所有mount point在同一时间内, 只能挂载一次
     * 所有partition在同一时间内, 只能挂载一次
     * 卸载时必须先将工作目录移到mount point(及其子目录)之外
***** DONE /etc/fstab
      * 第一栏: 磁盘设备文件名/UUID/label name
        * 文件系统或磁盘的设备文件名, 如[[/dev/sdc1][/dev/sdc1]]等
        * 文件系统的UUID名称, 如UUID=xxx
        * 文件系统的LABEL名称, 如LABEL=xxx
      * 第二栏: 挂载点(mount point)
      * 第三栏: 磁盘分区的文件系统
      * 第四栏: 文件系统参数
        | 参数                               | 内容意义                                                   |
        | async/sync(非同步/同步)            | 设备磁盘是否以非同步方式运行, 默认为async(性能较佳)         |
        | auto/noauto(自动/非自动)           | 当下达mount -a时, 此文件系统是否会被主动测试挂载.默认为auto |
        | rw/ro(可读写/只读)                 | 以读写或只读权限挂载                                       |
        | exec/noexec(执行/不可执行)         | 限制在此文件系统内是否可以进行'执行'操作                   |
        | user/nouser(允许/不允许使用者挂载) | 是否允许使用者使用Mount 指令挂载                           |
        | suid/nosuid(具有/不具有suid权限)   | 该文件系统是否允许SUID存在                                 |
        | defaults                           | 同时具有rw, suid, dev, exec, auto, nouser, async等参数           |
      * 第五栏: 能否被dump备份指令作用
      * 第六栏: 是否以fsck检验扇区
**** DONE 7.4.2 特殊扇区loop挂载(镜像文件不烧录就挂载使用)
     * 挂载光盘/DVD镜像文件
     * 创建大文件以制作loop设备文件
       * 创建大型文件
         #+begin_src bash
           [root@zhoush ~]# dd if=/dev/zero of=/srv/loopdev bs=1M count=512
           512+0 records in
           512+0 records out
           536870912 bytes (537 MB, 512 MiB) copied, 0.137646 s, 3.9 GB/s
           [root@zhoush ~]# ls -lh /srv/loopdev
           -rw-r--r-- 1 root root 512M Feb  9 18:04 /srv/loopdev
         #+end_src
       * 大型文件的格式化
         #+begin_src bash
           [root@zhoush ~]# mkfs.xfs -f /srv/loopdev
           [root@zhoush ~]# blkid /srv/loopdev
           /srv/loopdev: UUID="f82640f5-8775-4548-8799-981450b7a9f5" TYPE="xfs"
         #+end_src
       * 挂载
         #+begin_src bash
           [root@zhoush ~]# mount -o loop UUID="f82640f5-8775-4548-8799-981450b7a9f5" /mnt/ISO
           [root@zhoush ~]# df /mnt/ISO
           Filesystem     1K-blocks  Used Available Use% Mounted on
           /dev/loop0        520868 26404    494464   6% /mnt/ISO
         #+end_src
*** DONE 7.5 内存交换空间(swap)之创建 [2/2]
    * 设置一个swap partition
    * 创建一个虚拟内存的文件
**** DONE 7.5.1 使用实体分区创建swap
     创建swap分区步骤:
     1.分区: =gdisk= 分区给系统作为swap.可能需要设置systemID
     2.格式化: 利用创建swap格式的 =mkswap= 格工化为swap格式
     3.使用: 将该swap设备启动, =swapon device=
     4.观察: =free= 和 =swapon -s= 观察内存用量
**** DONE 7.5.2 使用文件创建swap
     1.使用 =dd= 指令新增一个128M的文件在[[/tmp][/tmp]]下面:
     #+begin_src bash
       [root@zhoush ~]# dd if=/dev/zero of=/tmp/swap bs=1M count=128
       128+0 records in
       128+0 records out
       134217728 bytes (134 MB, 128 MiB) copied, 0.0354004 s, 3.8 GB/s
     #+end_src
     2.使用 =mkswap= 将[[/tmp/swap][/tmp/swap]]格式化为swap文件格式
     #+begin_src bash
       [root@zhoush ~]# mkswap /tmp/swap
       mkswap: /tmp/swap: insecure permissions 0644, 0600 suggested.
       Setting up swapspace version 1, size = 128 MiB (134213632 bytes)
       no label, UUID=39630f6d-6a93-491b-a443-839b28fcd7fb
     #+end_src
     3.使用 =swapon= 启用[[/tmp/swap][/tmp/swap]]
     4.使用 =swapoff= 关闭
*** DONE 7.6 文件系统的特殊观察与操作 [2/2]
**** DONE 7.6.1 磁盘空间之浪费问题
**** DONE 7.6.2 利用GNU的parted进行分区行为(optional)
*** DONE 7.7 重点回顾 [0/0]
    * 一个可被挂载的数据通常被称为"文件系统, filesystem"而不是分区(partition)
    * 基本上Linux的传统文件系统为Ext2, 该文件系统内的信息主要有:
      * superblock: 记录filesystem整体信息, 包括inode/block总量, 使用量, 剩余量, 以及文件系统的格式与相关信息
      * inode: 记录文件的属性, 一个文件占用一个inode, 同时记录此文件的数据所在的block号码
      * block: 实际记录文件的内容, 若文件太大时, 会占用多个block
    * Ext2文件系统的数据存取为索引式文件系统(index allocation)
    * 需要磁盘重组的原因主要因block过于分散, 会影响文件读取性能
    * Ext2文件系统主要有: boot sector, superblock, inode bitmap, block bitmap, inode table, data block六大部分
    * data block用来文墨文件内容数据, 在Ext2文件系统中所支持的block大小有1K, 2K, 4K三种
    * inode 记录文件的属性/权限数据,
      其它重要项目为: 每个inode大小均固定为128Bytes/256Bytes两种基本容量.
      每个文件仅占用一个inode, 因此文件系统能够创建的文件数量与inode数量有关
    * 文件的block在记录文件的实际数据, 目录的block则在记录该目录下面文件名与其inode号码对照表.
    * 日志文件系统(journal)会多出一块记录区, 随时记载文件系统的主要活动, 可加快系统复原时间
    * Linux文件系统为增加性能, 会让内存作为大量的磁盘高速缓存
    * 实体链接只是多了一个文件名对该inode号码的链接
    * 符号链接类似Windows的快捷方式
    * 磁盘的使用必须经过:分区, 格式化与挂载,
      命令为: =gdisk=, =mkfs=, =mount=.
    * 分区时, 应使用 =parted= 检查分区表格式, 再判断使用fdisk/gdisk来分区.或直接使用 =parted= 分区
    * 为考虑性能, xfs文件系统格式化时, 可以考虑加上 agcount/su/sw/extsize等参数
    * 如果磁盘已无未分区的容量, 可以考虑使用大型文件取代磁盘设备的处理方式, 通过dd与格式化功能
    * 开机自动挂载可参考[[/etc/fstab][/etc/fstab]]设置, 设置完毕务必使用 =mount -a= 测试语法是否正确.
** DONE 第八章 文件与文件系统的压缩, 打包与备份 [8/8]
*** DONE 8.1 压缩文件的用途与技术 [0/0]
*** DONE 8.2 Linux系统常见的压缩指令 [0/0]
    * =gzip=, =zcat= / =zmore= / =zless= / =zgrep=
    * =bzip2=, =bzcat= / =bzmore= / =bzless= / =bzgrep=
    * =xz=, =xzcat= / =xzmore= / =xzless= / =xzgrep=
*** DONE 8.3 打包指令: =tar= [1/1]
**** DONE 8.3.1 =tar=
*** DONE 8.4 xfs文件系统的备份与还原 [2/2]
**** DONE 8.4.1 XFS文件系统的备份 =xfsdump=
**** DONE 8.4.2 XFS文件系统的还原 =xfsrestore=
*** DONE 8.5 光盘写入工具 [2/2]
**** DONE 8.5.1 =mkisofs=: 创建镜像文件
**** DONE 8.5.2 =cdrecorder=: 光盘烧录工具
*** DONE 8.6 其他常见的压缩与备份工具 [2/2]
**** DONE 8.6.1 =dd=
**** DONE 8.6.2 =cpio=
*** DONE 8.7 重点回顾 [0/0]
    * 压缩指令为通过一些运算方法将原本的文件进行压缩, 以减少文件所占用的磁盘容量.
      压缩前与压缩后的文件所占用的磁盘容量比值, 就可以被称为"压缩比"
    * 压缩的好处是可以减少磁盘容量的浪费
    * 压缩文件的扩展名大多是: ".gz, .bz2, .xz, .tar, .tar.gz, .tar.bz2, .tar.xz"
    * 常见的压缩指令有 =gzip=, =bzip2=, =xz=.压缩率最佳的xz, 但耗时严重
    * =tar= 可以用来进行文件打包, 并可支持 =gzip=, =bzip2=, =xz= 的压缩
    * 压  缩: =tar -Jcv -f filename.tar.xz 要被压缩的文件或目录名称=
    * 查  询: =tar -Jtv -f filename.tar.xz file=
    * 解压缩: =tar -Jxv -f filename.tar.xz -C file=
    * =xfsdump= 备份文件系统或单一目录
    * =xfsdump= 的备份若针对文件系统时, 可进行0-9 level差异备份, 其中level 0为完整备份
    * =xfsrestore= 可还原被xfsdump创建的备份文件
    * =mkisofs= 创建光盘烧录数据
    * =wodim= 可写入CD或DVD烧录机
    * =dd= 可完整备份partition或disk, 因为dd可读写磁盘的sector表面数据
    * =cpio= 必须搭配类似find指令来读入欲备份的文件名数据, 方可进行备份操作.
*** DONE 8.8 本章习题 [0/0]
** DONE 第九章 vim程序编辑器 [0/0]
** DONE 第十章 认识与学习BASH [fn:2] [7/7]
*** DONE 10.1 认识BASH这个Shell [6/6]
**** DONE 10.1.1 硬件、核心与Shell
**** DONE 10.1.2 为何要学命令行的shell?
**** DONE 10.1.3 系统的合法shell与/etc/shells功能
**** DONE 10.1.4 bash shell的功能
     * 命令编修能力(history)
     * 命令与补全功能(@@html:<kbd>@@ <tab> @@html:</kbd>@@)
     * 命令别名设置能力(=alias=)
       * =alias lm='ls -al'=
     * 工作控制, 前后台控制(job control, foreground, background)
     * 程序化脚本: (shell scripts)
     * 万用字符: (wildcard)
**** DONE 10.1.5 查询指令是否为bash shell的内置命令: =type=
**** DONE 10.1.6 指令的下达与快速编辑按钮
     | 组合键                                                                | 功能与示范                      |
     | @@html:<kbd>@@ C-u @@html:</kbd>@@/@@html:<kbd>@@ C-k @@html:</kbd>@@ | 分别是从光标处向前/后删除指令串 |
     | @@html:<kbd>@@ C-a @@html:</kbd>@@/@@html:<kbd>@@ C-e @@html:</kbd>@@ | 分别让光标移动到行首/尾         |
*** DONE 10.2 SHELL的功能变量 [8/8]
**** DONE 10.2.1 什么是变量
     * 变量的可变性与方便性
     * 影响bash环境操作的变量
     * 脚本程序设计(shell script)的好帮手
**** DONE 10.2.2 变量的取用与设置: =echo=, 变量设置规则, =unset=
     * 变量的取用: =echo=
     * 变量的设置规则:
       * 变量与变量内容以一个等号"="来连接, 如下所示: "myname=zhoush"
       * 等号两边不能接空白字符
       * 变量名称只能是英文字母或数字, 但不能以数字开头
       * 变量内容若有空白字符可使用""或''结合, 但
         * 双引号内的特殊字符如"$"等, 可以保持原有我
         * 单引号内的特殊字符则仅为一般字符(纯文本)
       * 可用'\'将特殊符号(如[Enter], $, \, 空白字符, '等)变成一般字符
       * 在一串指令的执行中, 还需要借由其它额外的指令所提供的信息时, 可以使用反单引号`, 或$(指令)
       * 若该变量为扩增变量内容时, 则可用"$变量名称"或"${变量}"累加内容
       * 若该变量需要在其它子程序执行, 则需要以export使变量主烦忧环境变量
       * 通常大写字符为系统默认变量, 自行设置可以使用小写字符
       * 取消变量的方法为 =unset=
**** DONE 10.2.3 环境变量的功能
     * 用 =env= 观察环境变量与常见变量说明
       * HOME 使用者的主文件夹
       * SHELL 正在使用的是哪个SHELL, Linux 默认为bash
       * HISTSIZE 最大历史文件记录数量
       * MAIL mail指令收信时, 系统会读取的邮件信息文件
       * PATH 可执行文件执导路径
       * LANG 语系
       * RANDOM 随机数
     * 用 =set= 观察所有变量(含环境变量与自定义变量)
       * PS1: (提示字符的设置)
         * \d: 可显示出"星期 月 日" 的日期格式
         * \H: 完整的主机名称.
         * \h: 仅显示主机名称在第一个小数点之前的名字
         * \t: 显示时间, 为24小时格式的"HH:MM:SS"
         * \T: 显示时间, 为12小时格式的"HH:MM:SS"
         * \A: 显示时间, 为24小时格式的"HH:MM"
         * \@: 显示时间, 为12小时格式的"am/pm"字样
         * \u: 目前使用者的帐号名称
         * \v: BASH的版本信息
         * \w: 完整的工作目录名称
         * \W: 利用bashname函数取得工作目录名称, 所以仅会列出最后一个目录名
         * #: 下达的第几个指令
         * $: 提示字符, 如果是root, 提示字符为#
       * $: 本shell的PID
       * ?: 上个执行命令的返回值
       * OSTYPE, HOSTTYPE, MACHTYPE(主机硬件与核心的等级)
       * =export=: 自定义变量转为环境变量
**** DONE 10.2.4 影响结果的语系变量(locale)
**** DONE 10.2.5 变量的有效范围
**** DONE 10.2.6 变量键盘读取, 阵列与宣告: =read=, =array=, =declare=
     * =read=
     * =declare= / =typedef=
       #+begin_src bash
         [dmtsai@study ~]$ declare [-aixr] variable
         选项与参数:
         -a  : 将后面名为 variable 的变量定义成为阵列  (array)  类型
         -i  : 将后面名为 variable 的变量定义成为整数数字  (integer)  类型
         -x  : 用法与 export 一样, 就是将后面的 variable 变成环境变量；
         -r  : 将变量设置成为 readonly 类型, 该变量不可被更改内容, 也不能 unset
         范例一: 让变量 sum 进行 100+300+50 的加总结果
         [dmtsai@study ~]$ sum=100+300+50
         [dmtsai@study ~]$ echo ${sum}
         100+300+50
         [dmtsai@study ~]$ declare -i sum=100+300+50
         [dmtsai@study ~]$ echo ${sum}
         450
       #+end_src
       * 变量类型默认为字符串.
       * bash环境中的数值运算默认最多为整数
     * 阵列(array)变量类型
**** DONE 10.2.7 与文件系统及程序的限制关系: =ulimit=
**** DONE 10.2.8 变量内容的删除, 取代与替换(optional)
     * 变量内容的删除与取代
       | 变量设置方式               | 说明                                                           |
       |----------------------------+----------------------------------------------------------------|
       | ${变量#关键字}             | 若变量内容从头开始的数据符合"*关键字*", 则将符合的最短数据删除 |
       | ${变量##关键字}            | 若变量内容从头开始的数据符合"*关键字*", 则将符合的最长数据删除 |
       |----------------------------+----------------------------------------------------------------|
       | ${变量%关键字}             | 若变量内容从尾开始的数据符合"*关键字*", 则将符合的最短数据删除 |
       | ${变量%%关键字}            | 若变量内容从尾开始的数据符合"*关键字*", 则将符合的最长数据删除 |
       |----------------------------+----------------------------------------------------------------|
       | ${变量/旧字符串/新字符串}  | 若变量内容符合"*旧字符串*", 则第一个旧字符串会被新字符串取代   |
       | ${变量//旧字符串/新字符串} | 若变量内容存在"*旧字符串*", 则全部的旧字符串会被新字符串取代   |
     * 变量的测试与内容替换
       | 变量设置方式     | str没有设置        | str为空字串        | str已设置非为空字串 |
       | var=${str-expr}  | var=expr           | var=               | var=$str            |
       | var=${str:-expr} | var=expr           | var=expr           | var=$str            |
       | var=${str+expr}  | var=               | var=expr           | var=expr            |
       | var=${str:+expr} | var=               | var=               | var=expr            |
       | var=${str=expr}  | str=expr var=expr  | str 不变 var=      | str 不变 var=$str   |
       | var=${str:=expr} | str=expr var=expr  | str=expr var=expr  | str 不变 var=$str   |
       | var=${str?expr}  | expr 输出至 stderr | var=               | var=$str            |
       | var=${str:?expr} | expr 输出至 stderr | expr 输出至 stderr | var=$str            |
*** DONE 10.3 命令别名与历史命令 [2/2]
**** DONE 10.3.1 命令别名设置: =alias=, =unalias=
**** DONE 10.3.2 历史命令: =history=
*** DONE 10.4 bash shell的操作环境 [5/5]
**** DONE 10.4.1 路径与指令搜寻顺序
     1.以相对/绝对路径执行命令
     2.由alias 找到该指令来执行
     3.由bash内置的(builtin)来执行
     4.通过$PATH这个变量的顺序搜寻到的第一个指令来执行
**** DONE 10.4.2 bash的进站与欢迎讯息: [[/etc/issue][/etc/issue]], [[/etc/motd][/etc/motd]]
     * issue内的各代码意义:
       * \d 本地端时间的日期
       * \l 显示第几个终端机接口
       * \m 显示硬件等级
       * \n 显示主机的网络名称
       * \O 显示domain name
       * \r 操作系统的版本(相当于 =uname -r=)
       * \t 显示本地端时间的时间
       * \S 操作系统的名称
       * \v 操作系统的版本
**** DONE 10.4.3 bash的环境配置文件
**** DONE 10.4.4 终端机的环境设置: =stty=, =set=
     | 组合按键                           | 执行结果                          |
     | @@html:<kbd>@@ C-c @@html:</kbd>@@ | 终目目前的命令                    |
     | @@html:<kbd>@@ C-d @@html:</kbd>@@ | 输入结束(EOF), 例如邮件结束的时候 |
     | @@html:<kbd>@@ C-m @@html:</kbd>@@ | 就是Enter啦                       |
     | @@html:<kbd>@@ C-s @@html:</kbd>@@ | 暂停屏幕的输出                    |
     | @@html:<kbd>@@ C-q @@html:</kbd>@@ | 恢复屏幕的输出                    |
     | @@html:<kbd>@@ C-u @@html:</kbd>@@ | 在提示字符下, 将整列命令删除      |
     | @@html:<kbd>@@ C-z @@html:</kbd>@@ | "暂停"目前的命令                  |
**** DONE 10.4.5 万用字符与特殊符号
     | 符号 | 意义                                  |
     | *    | 代表"0到无穷多个"任意字符             |
     | ?    | 代表"一定有一个"任意字符              |
     | []   | 一定有一个括号内的字符                |
     | [-]  | 在编码顺序内的所有字符                |
     | [^]  | 第一个字符为^时, 表示反选括号内的字符 |
*** DONE 10.5 数据流重导向 [2/2]
**** DONE 10.5.1 什么是数据流重导向
     * stdanrd output 与standard error output
       1.标准输入(stdin): 代码为0, 使用< 或<<;
       2.标准输出(stdout): 代码为1, 使用> 或>>
       3.标准错误输出(stderr): 代码为2, 使用2> 或2>>
     * [[/dev/null][/dev/null]]: 垃圾桶黑洞设备与特殊写法
     * standard input: < 与<<


     * >&: [[https://stackoverflow.com/questions/23489934/echo-2-some-text-what-does-it-mean-in-shell-scripting][unix - echo >&2 \"some text\" what does it mean in shell scripting - Stack Overflow]]

     #+begin_quote
     [dmtsai@study ~]$ cat > catfile << "eof"
     > This is a test.
     > OK now stop
     > eof  <==輸入這關鍵字，立刻就結束而不需要輸入 [ctrl]+d

     [dmtsai@study ~]$ cat catfile
     This is a test.
     OK now stop     <==只有這兩行，不會存在關鍵字那一行！
     #+end_quote
**** DONE 10.5.2 命令执行的判断依据: ;, &&, ||
     DEADLINE: <2017-02-10 Fri>
     * cmd; cmd (不考虑指令相关性的连接指令下达)
     * $?(指令返回)与&& 或||
       | 指令下达情况 | 说明                                                |
       | cmd1&&cmd2   | 1.若cmd1执行完毕且正确执行($? == 0).则开始执行cmd2. |
       |              | 2.若cmd1执行完毕且为错误($? != 0), 则cmd2不执行     |
       | cmd1         | 1.若cmd1执行完毕且正确执行, 则cmd2不执行            |
       |              | 2.若cmd1执行完毕且为错误, 则开始执行cmd2            |

*** DONE 10.6 管线命令 [7/7]
**** DONE 10.6.1 撷取命令: cut, grep
**** DONE 10.6.2 排序命令: sort, wc, uniq
**** DONE 10.6.3 双向重导向: =tee=
**** DONE 10.6.4 字符转换命令: =tr=, =col=, =join=, =paste=, =expand=
**** DONE 10.6.5 分区命令: =split=
**** DONE 10.6.6 参数代换: =xargs=
**** DONE 10.6.7 关于减号- 的用途
*** DONE 10.7 重点回顾 [0/0]
    * 由于核心在内存中是受保护的区块, 因此我们必须要通过"shell"沟通kernel控制硬件工作
** DONE 第十一章 正则表达式与文件格式化处理 [7/7]
*** DONE 11.1 开始之前: 什么是正则表达式 [0/0]
    *Tips: 正则表达式与万用字符是完全不一样的东西*
    划分:
    1.基础正则表达式
    2.延伸正则表达式(*群组的字符串处理*: /and/, or/)
*** DONE 11.2 基础正则表达式 [5/5]
**** DONE 11.2.1 语系对正则表达式的影响
     | 特殊特号   | 代表意义                                                      |
     |------------+---------------------------------------------------------------|
     | /          | <                                                             |
     | [:alnum:]  | 代表英文大小写字符及数字, 0-9, A-Z, a-z                       |
     | [:alpha:]  | 代表任何英文大小写字符, A-Z, a-z                               |
     | [:blank:]  | 代表空格键与[Tab]                                             |
     | [:cntrl:]  | 代表键盘上面的控制按键, 亦即包括 CR, LF, Tab, Del..等等      |
     | [:digit:]  | 代表数字而已, 亦即 0-9                                        |
     | [:graph:]  | 除了空白字符  (空白键与 [Tab] 按键)  外的其他所有按键         |
     | [:lower:]  | 代表小写字符, 亦即 a-z                                        |
     | [:print:]  | 代表任何可以被打印出来的字符                                  |
     | [:punct:]  | 代表标点符号  (punctuation symbol) , 亦即: " ' ? ! ; : # $...|
     | [:upper:]  | 代表大写字符, 亦即 A-Z                                        |
     | [:space:]  | 任何会产生空白的字符, 包括空白键, [Tab], CR 等等              |
     | [:xdigit:] | 代表 16 进位的数字类型, 因此包括:  0-9, A-F, a-f 的数字与字符 |
**** DONE 11.2.2 grep的一些进阶选项
     | 选项与参数   | 作用                                                            |
     | -A           | 后面可加数字, 为after的意思, 除了列出该行外, 后续的n行也列出来  |
     | -B           | 后面可加数字, 为before的意思, 除了列出该行外, 前面的n行也列出来 |
     | --color=auto | 可将正确的那个撷取数据列出颜色                                  |
**** DONE 11.2.3 基础正则表达式练习
**** DONE 11.2.4 基础正则表达式字符汇整(characters)
     | RE 字符 | 意义与范例                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
     | ^word   | 意义: 待搜寻的字串 (word) 在行首! 范例: 搜寻行首为 # 开始的那一行, 并列出行号 > grep -n '^#' regular_express.txt                                                                                                                                                                                                                                                                                                                                                                    |
     | word$   | 意义: 待搜寻的字串 (word) 在行尾! 范例: 将行尾为 ! 的那一行打印出来, 并列出行号 > grep -n '!$' regular_express.txt                                                                                                                                                                                                                                                                                                                                                                  |
     | .       | 意义: 代表"一定有一个任意字符"的字符! 范例: 搜寻的字串可以是  (eve)   (eae)   (eee)   (e e) , 但不能仅有  (ee)  ! 亦即 e 与 e 中间"一定"仅有一个字符, 而空白字符也是字符!  > grep -n 'e.e' regular_express.txt                                                                                                                                                                                                                                                                      |
     | \       | 意义: 跳脱字符, 将特殊符号的特殊意义去除! 范例: 搜寻含有单引号 ' 的那一行!  > grep -n \' regular_express.txt                                                                                                                                                                                                                                                                                                                                                                        |
     | *       | 意义: 重复零个到无穷多个的前一个RE字符 范例: 找出含有 (es) (ess) (esss)  等等的字串, 注意, 因为 可以是 0 个, 所以 es 也是符合带搜寻字串.另外, 因为 为重复"前一个 RE 字符"的符号, 因此, 在 之前必须要紧接着一个 RE 字符喔! 例如任意字符则为 "." !  > grep -n 'ess*' regular_express.txt                                                                                                                                                                                              |
     | [list]  | 意义: 字符集合的 RE 字符, 里面列出想要撷取的字符! 范例: 搜寻含有  (gl)  或  (gd)  的那一行, 需要特别留意的是, 在 [] 当中"谨代表一个待搜寻的字符", 例如" a[afl]y "代表搜寻的字串可以是 aay, afy, aly 即 [afl] 代表 a 或 f 或 l 的意思!  > grep -n 'g[ld]' regular_express.txt                                                                                                                                                                                                        |
     | [n1-n2] | 意义: 字符集合的 RE 字符, 里面列出想要撷取的字符范围! 范例: 搜寻含有任意数字的那一行! 需特别留意, 在字符集合 [] 中的减号 - 是有特殊意义的, 他代表两个字符之间的所有连续字符! 但这个连续与否与 ASCII 编码有关, 因此, 你的编码需要设置正确 (在 bash 当中, 需要确定 LANG 与 LANGUAGE 的变量是否正确! )  例如所有大写字符则为 [A-Z] > grep -n '[A-Z]' regular_express.txt                                                                                                               |
     | [^list] | 意义: 字符集合的 RE 字符, 里面列出不要的字串或范围! 范例: 搜寻的字串可以是  (oog)   (ood)  但不能是  (oot)  , 那个 ^ 在 [] 内时, 代表的意义是"反向选择"的意思.例如, 我不要大写字符, 则为 [^A-Z].但是, 需要特别注意的是, 如果以 grep -n [^A-Z] regular_express.txt 来搜寻, 却发现该文件内的所有行都被列出, 为什么？因为这个 [^A-Z] 是"非大写字符"的意思, 因为每一行均有非大写字符, 例如第一行的 "Open Source" 就有 p, e, n, o....等等的小写字 > grep -n 'oo[^t]' regular_express.txt |
     | {n, m}  | 意义: 连续 n 到 m 个的"前一个 RE 字符" 意义: 若为 {n} 则是连续 n 个的前一个 RE 字符, 意义: 若是 {n, } 则是连续 n 个以上的前一个 RE 字符!  范例: 在 g 与 g 之间有 2 个到 3 个的 o 存在的字串, 亦即  (goog)  (gooog)  > grep -n 'go\{2, 3\}g' regular_express.txt                                                                                                                                                                                                                     |
**** DONE 11.2.5 sed工具
     #+begin_quote
     选项与参数:
     -n :使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到屏幕上。
     但如果加上 -n 参数后，则只有经过 sed 特殊处理的那一行(或者动作)才会被列出来。
     -e :直接在命令行界面上进行 sed 的动作编辑;
     -f :直接将 sed 的动作写在一个文件内， -f filename 则可以执行 filename 内的 sed 动作;
     -r :sed 的动作支持的是延伸型正则表达式的语法。(默认是基础正则表达式语法)
     -i :直接修改读取的文件内容，而不是由屏幕输出。
     动作说明: [n1[,n2]]function
     n1, n2 :不见得会存在，一般代表“选择进行动作的行数”，举例来说，如果我的动作
     是需要在 10 到 20 行之间进行的，则“ 10,20[动作行为] ”
     function 有下面这些咚咚:
     a :新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)~
     c :取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行!
     d :删除，因为是删除啊，所以 d 后面通常不接任何咚咚;
     i :插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行);
     p :打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行~
     s :取代，可以直接进行取代的工作哩!通常这个 s 的动作可以搭配正则表达式!
     例如 1,20s/old/new/g 就是啦!
     #+end_quote
*** DONE 11.3 延伸正则表达式 [0/0]
    | RE 字符 | 意义与范例                                 |
    |---------+--------------------------------------------|
    | +       | 意义: 重复"一个或一个以上"的前一个 RE 字符 |
    | ?       | 意义: "零个或一个"的前一个 RE 字符         |
    |---------+--------------------------------------------|
    | ()      | 意义: 找出"群组"字串                       |
    | ()+     | 意义: 多个重复群组的判别                   |
*** DONE 11.4 文件的格式化与相关处理 [4/4]
**** DONE 11.4.1 格式化打印: =printf=
**** DONE 11.4.2 =awk=
     * 内置变量
       | 变量名称 | 代表意义                      |
       | NF       | 每一行($0)拥有的字段总数      |
       | NR       | 目前awk所处理的是"第几行"数据 |
       | FS       | 目前的分隔字符,默认是空白字符 |
     * 逻辑运算字符
       | 运算单元 | 代表意义   |
       | >        | 大于       |
       | <        | 小于       |
       | >=       | 大于或等于 |
       | <=       | 小于或等于 |
       | ==       | 等于       |
       | !=       | 不等于     |
**** DONE 11.4.3 文件比对工具
     * =diff=
     * =cmp=
     * =patch=
**** DONE 11.4.4 文件打印准备:=pr=
*** DONE 11.5 重点回顾 [0/0]
    * 正则表达式就是处理字符串的方法,它是以行为单位来进行字符串的处理行为;
    * 正则表达式通过一些特殊特号的辅助, 可以让使用者轻蝗 查/删/改 特定字符串
    * 只要工具程序支持正则表达式, 该工具就可以用来作为正则表达式的字符处理之用
    * 正则表达式与万用字符是完全不一样的东西!
      万用字符(wildcard)代表的是bash操作接口的功能, 但正则表达式是一种字符串处理的表示方式
    * 使用grep或其它工具进行正则表达式的字符串比对时, 最好将LANG等变量设为C或en
    * grep与egrep在正则表达式里常用. egrep支持正严谨的正则表达式语法
    * 由于编码系统不同,不同语系(LANG)会造成正则表达式撷取数据的差异.
      因此可利用特殊符号[:upper:]替代编码范围较佳
    * 由于严谨度不同, 正则表达式之上还有更严谨的延伸正则表达式
    * 基础正则表达式的特殊字符有: *, ., [], [-], ^, $等
    * 常见的支持正则表达式的工具软件有:grep, sed, vim等
    * printf可以通过一些特殊符号来将数据进行格式化输出
    * awk可以使用"字段"为依据, 进行数据的重新整理和输出
    * 文件的比对中, 可利用diff及cmp进行比对, 其中diff主要用在纯文本方面的新旧版本比对
    * patch指令可以将旧版数据更新到新版(主要由diff创建patch的补丁来源文件)
*** DONE 11.6 本章习题 [0/0]
*** DONE 11.7 参考资料与延伸阅读 [0/0]
** DONE 第十二章 学习Shell Scripts [8/8]
*** DONE 12.1 什么是shell scripts [3/3]
**** DONE 12.1.1 为什么学习shell scripts
     * 追踪与管理系统的重要工作
     * 简单入侵侦测功能
     * 连续指令单一化
     * 简易的数据处理
     * 跨平台支持与学习历程较短
**** DONE 12.1.2 第一支script的撰写与运行
     注意事项:
     1. 指令的执行是从上而下, 从左而右的分析与执行
     2. 指令的下达:指令, 选项与参数间的多个空白都会被忽略
     3. 空白行也将被忽略, 并且@@html:<kbd>@@ <tab> @@html:</kbd>@@也会被视为空格
     4. 读取到一个@@html:<kbd>@@  <Enter> @@html:</kbd>@@符号(CR), 就尝试执行该行
     5. 一行内容太多, 可以使用"@@html:<kbd>@@ <Enter> @@html:</kbd>@@延伸至下一行
     6. "#"可作为注释. # 后的内容将被忽略
     执行方法:
     * 直接下达指令: shell.sh必须具备rx权限
       * 绝对路径: =/home/zhoush/shell.sh=
       * 相对路径: =./shell.sh=
       * 变量"PATH": 放在PATH指定的目录内后可直接执行
     * 以bash程序执行. =bash shell.sh=, =sh shell.sh=
**** DONE 12.1.3 撰写shell script的良好习惯
     在script的文件开始处记录:
     * script的功能
     * script的版本信息
     * script的作者与联系方式
     * script的版本宣告方式
     * script的历史记录
     * script内特殊的指令, 使用"绝对路径"的方式来下达;
     * script运行时需要的环境变量预先宣告与设置
*** DONE 12.2 简单的shell script练习 [2/2]
**** DONE 12.2.1 简单范例
     * 对谈式脚本: 变量内容由使用者决定
       [[file:Chapter12/showname.sh::#!/bin/bash][showname.sh]]
     * 随日期变化: 利用date进行文件的创建
       [[file:Chapter12/create_3_filename.sh::#!/bin/bash][create_3_files.sh]]
     * 数值运算: 简单的加减乘除
       [[file:Chapter12/multiplying.sh::#!/bin/bash][multiplying.sh]]
     * 数值运算: 通过bc计算pi
**** DONE 12.2.2 script的执行方式差异(=source=, =sh script=, =./script=)
     * 利用直接执行的方式来执行script
     * 利用source来执行脚本: 在父程序中执行
       立即生效
*** DONE 12.3 善用判断式 [3/3]
**** DONE 12.3.1 利用test指令的测试功能
     1. 关于某个文件名的"文件类型"判断, 如  =test -e filename= 是否存在
        | 测试标志 | 代表意义                                    |
        | -e       | 该"文件名"是否存在?(常用)                   |
        | -f       | 该"文件名"是否存在且为文件(file)(常用)      |
        | -d       | 该"文件名"是否存在且为目录(directory)(常用) |
        | -b       | 该"文件名"是否存在且为block device设备      |
        | -c       | 该"文件名"是否存在且为character device设备  |
        | -S       | 该"文件名"是否存在且为一个Socket文件        |
        | -p       | 该"文件名"是否存在且为一个FIFO(pipe)文件?   |
        | -L       | 该"文件名"是否存在且为一个链接文件          |
     2. 关于文件的权限侦测, 如 =test -r filename= 表示可读否
        | 测试标志 | 代表意义                                   |
        | -r       | 侦测该文件名是否存在且具有"可读"权限       |
        | -w       | 侦测该文件名是否存在且具有"可写"权限       |
        | -x       | 侦测该文件名是否存在且具有"可执行"权限     |
        | -u       | 侦测该文件名是否存在且具有"SUID"属性       |
        | -g       | 侦测该文件名是否存在且具有"SGID"属性       |
        | -k       | 侦测该文件名是否存在且具有"Sticky bit"属性 |
        | -s       | 侦测该文件名是否存在且具有"非空白"文件     |
     3. 两个文件之间的比较, 如: =test file1 -nt file2=
        | 测试标志 | 代表意义                                              |
        | -nt      | (newer than)判断file1是否比file2新                    |
        | -ot      | (older than)判断file1是否比file2旧                    |
        | -ef      | 判断file1与file2是否为同一文件,可用在判断hard link上. |
        |          | 主要意义在判断两个文件是否均指向同一个inode           |
     4. 关于两个整数之间的判断, 如: =test n1 -eq n2=
        | 测试标志 | 代表意义                               |
        | -eq      | 两数值相等(equal)                      |
        | -ne      | 两数值不相等(not equal)                |
        | -gt      | n1大于n2(greater than)                 |
        | -lt      | n1小于n2(less than)                    |
        | -ge      | n1大于等于n2(greater than or euqal to) |
        | -le      | n1小于等于n2(less than or equal to)    |
     5. 判断字串的数据
        | 测试标志  | 代表意义         |
        | -z string | 字符串长度为0?   |
        | -n string | 字符串长度不为0? |
        | s1 == s2  | 两字符串相等     |
        | s1 != s2  | 两字符串不等     |
     6. 多重条件判定, 如: =test -r filename -a -x filename=
        | 测试标志 | 代表意义                                         |
        | -a       | (and)两条件同时成立                              |
        | -o       | (or)两条件任一成立                               |
        | !        | 反相状态, 如 =text ! -x file=, 当file不具x时成立 |
**** DONE 12.3.2 利用判断符号[]
     [[file:Chapter12/ans_yn.sh::#!/bin/bash][ans_yn.sh]]
     注意事项:
     * 在中括号[]内每个元件都需要空白字符来分隔
     * 在中括号内的变量, 最好都以双引号括号起来
     * 在中括号内的常数, 最好都以单或双绰号括号起来
**** DONE 12.3.3 shell script的默认变量($0, $1...)
     * $#: 代表的后接的参数"个数"
     * $@: 代表"$1""$2""$3"...., 每个变量是独立的(用双引号括起来)
     * $*: 代表"$1<u>c</u>$2<u>c</u>...."其中<u>c</u>为分隔字符, 默认为空格
*** DONE 12.4 条件判断式 [3/3]
**** DONE 12.4.1 利用 if ... then
     * 单层, 简单条件判断式
       [[file:Chapter12/ans_yn_2.sh::#!/bin/bash][if block]]
**** DONE 12.4.2 利用 case ... esac判断
     [[file:Chapter12/hello-3.sh::#!/bin/bash][Show "Hello" from $1.... by using case .... esac]]
**** DONE 12.4.3 利用function功能
     [[file:Chapter12/show123-3.sh::#!/bin/bash][function]]
*** DONE 12.5 循环(loop) [4/4]
**** DONE 12.5.1 while do done, until do done(不定循环)
**** DONE 12.5.2 for...do...done(固定循环)
**** DONE 12.5.3 for...do...done的数值处理
**** DONE 12.5.4 搭配乱数与阵列的实验
     [[file:Chapter12/what_to_eat-2.sh::#!/bin/bash][Try do tell you what you may eat.]]
*** DONE 12.6 shell script的追踪与debug [0/0]
*** DONE 12.7 重点回顾 [0/0]
    * shell script是利用shell的功能所写的一个程序
    * shell script用在系统管理很方便, 但是用在处理大量数值运算上不够友好
    * 在shell script的文件中, 指令的执行是从上而下, 从左而右的分析与执行
    * shell script的执行至少要具有r的权限, 若需要直接下达, 则需要具有rx权限
    * 良好的编写习惯
    * 对谈式脚本可用read指令达成;
    * 要创建每次执行脚本都具有不同结果的数据, 可使用date指令利用日期达成
    * script的执行若以source来执行, 代表在父程序的bash内执行之意!
    * 若需要进行判断式, 可使用test或中括号[]处理
    * sciprt内, $0 $1 $2, ... $@具有特殊意义
    * 条件判断式可使用if... then判断, 若是固定变量内容的情况下, 可使用case $var in ... esac
    * 循环主要分为不定循环(while, until)和固定循环(for), 配合do, done完成任务
    * 可使用 =sh -x script.sh= 进行debug
*** DONE 12.8 本章习题 [0/0]
    1.
       #+begin_src bash
         #!/bin/bash
         echo -e "name : $(whoami)"
         echo -e "dir  : $(pwd)"
       #+end_src
** DONE 第十三章 Linux帐号管理与ACL权限设置 [3/3]
*** DONE 13.1 Linux的帐号与群组 [3/3]
**** DONE 13.1.1 使用者识别码: UID与GID
**** DONE 13.1.2 使用者帐号
**** DONE 13.1.3 关于群组: 有效与初始化群组, groups, newgrp
*** DONE 13.2 帐号管理 [5/5]
**** DONE 13.2.1 新增与移除使用者: =useradd=, 相关配置文件, =psswd=, =usermod=, =userdel=
**** DONE 13.2.2 使用者功能
     * =id=: 查询UID/GID
     * =finger=:
       * =chfn=:
     * =chsh=: change shell
**** DONE 13.2.3 新增与移除群组
     * =groupadd=
     * =groupdel=
**** DONE 13.2.4 帐号管理实例
     | 帐号名称 | 帐号全名 | 支持次要群组 | 是否可登陆主机 | 密码     |
     | myuser1  | 1st user | mygroup1     | 可以           | password |
     | myuser2  | 2nd user | mygroup1     | 可以           | password |
     | myuser3  | 3rd user | 无额外支持   | 不可以         | password |
     #+begin_src bash
       # 先处理帐号相关属性的数据：
       [root@study ~]# groupadd mygroup1
       [root@study ~]# useradd -G mygroup1 -c "1st user" myuser1
       [root@study ~]# useradd -G mygroup1 -c "2nd user" myuser2
       [root@study ~]# useradd -c "3rd user" -s /sbin/nologin myuser3
       # 再处理帐号的密码相关属性的数据：
       [root@study ~]# echo "password" &#124; passwd --stdin myuser1
       [root@study ~]# echo "password" &#124; passwd --stdin myuser2
       [root@study ~]# echo "password" &#124; passwd --stdin myuser3
     #+end_src
**** DONE 13.2.5 使用外部身份认证系统
*** DONE 13.3 主机的细部权限规划: ACL的使用 [2/2]
**** DONE 13.3.1 什么是ACL与如何支持启动ACL
     * 如何启动ACL
       =dmesg | grep -i acl=
**** DONE 13.3.2 ACL的设置技巧: =getfacl= =setfacl=
     * =getfacl=: 取得某个文件/目录的ACL设置项目
     * =setfacl=: 设置某个文件/目录的ACL规范
** DONE 第十六章 程序管理与SELinux初探 [5/5]
*** DONE 16.1 什么是程序(process) [2/2]
**** DONE 16.1.1 进程与程序 (process & program)
     * program: binary program, 可执行
     * process: running program
     * 子进程与父进程: fork
     * fork and exec: 程序调用的流程
     * 系统或网络服务器: 常驻内存 (daemon)
**** DONE 16.1.2 Linux 的多用户多任务环境
     - 多任务行为
     - 多重登录环境的七个基本终端窗口
       ~<alt> + [<f1>-<f7>]~ 切换终端界面
     - 特殊的程序管理行为
       程序卡死的处理: 切换终端窗口后 ~ps -aux~ 找到错误程序 ~kill~ 即可
     - bash 环境下的工作管理
       #+begin_src sh
         cp file1 file2 &
       #+end_src
       *&* 置于背景执行, 此时可以执行其它任务
*** DONE 16.2 工作管理 (job control) [3/3]
**** DONE 16.2.1 什么是工作管理 ?
**** DONE 16.2.2 job control的管理
     - 直接将指令丢到背景中执行的 *&*
     - 暂停到背景: ~<ctrl> - z~
     - 观察背景工作状态: ~jobs~
     - 将背景工作拿到前台处理: ~fg~
     - 让背景工作运行中: ~bg~
     - 管理背景当中的工作: ~kill~
       - *-9*: 强制删除一个不正常的工作
       - *-15(~SIGTERM~)*: 默认, 以正常步骤结束一项工作


     | No | Name      | Default Action    | Description                                                                               |
     |----+-----------+-------------------+-------------------------------------------------------------------------------------------|
     |  1 | SIGHUP    | terminate process | commonly used to notify daemon processes (Chapter 13) to reread their configuration files |
     |  2 | SIGINT    | terminate process | interrupt program                                                                         |
     |  3 | SIGQUIT   | create core image | quit program                                                                              |
     |  4 | SIGILL    | create core image | illegal instruction                                                                       |
     |  5 | SIGTRAP   | create core image | trace trap                                                                                |
     |  6 | SIGABRT   | create core image | abort program (formerly SIGIOT)                                                           |
     |  7 | SIGEMT    | create core image | emulate instruction executed                                                              |
     |  8 | SIGFPE    | create core image | floating-point exception                                                                  |
     |  9 | SIGKILL   | terminate process | kill program                                                                              |
     | 10 | SIGBUS    | create core image | bus error                                                                                 |
     | 11 | SIGSEGV   | create core image | segmentation violation                                                                    |
     | 12 | SIGSYS    | create core image | non-existent system call invoked                                                          |
     | 13 | SIGPIPE   | terminate process | write on a pipe with no reader                                                            |
     | 14 | SIGALRM   | terminate process | real-time timer expired                                                                   |
     | 15 | SIGTERM   | terminate process | software termination signal                                                               |
     | 16 | SIGURG    | discard signal    | urgent condition present on socket                                                        |
     | 17 | SIGSTOP   | stop process      | stop (cannot be caught or ignored)                                                        |
     | 18 | SIGTSTP   | stop process      | stop signal generated from keyboard                                                       |
     | 19 | SIGCONT   | discard signal    | continue after stop                                                                       |
     | 20 | SIGCHLD   | discard signal    | child status has changed                                                                  |
     | 21 | SIGTTIN   | stop process      | background read attempted from control terminal                                           |
     | 22 | SIGTTOU   | stop process      | background write attempted to control terminal                                            |
     | 23 | SIGIO     | discard signal    | I/O is possible on a descriptor (see fcntl(2))                                            |
     | 24 | SIGXCPU   | terminate process | cpu time limit exceeded (see setrlimit(2))                                                |
     | 25 | SIGXFSZ   | terminate process | file size limit exceeded (see setrlimit(2))                                               |
     | 26 | SIGVTALRM | terminate process | virtual time alarm (see setitimer(2))                                                     |
     | 27 | SIGPROF   | terminate process | profiling timer alarm (see setitimer(2))                                                  |
     | 28 | SIGWINCH  | discard signal    | Window size change                                                                        |
     | 29 | SIGINFO   | discard signal    | status request from keyboard                                                              |
     | 30 | SIGUSR1   | terminate process | User defined signal 1                                                                     |
     | 31 | SIGUSR2   | terminate process | User defined signal 2                                                                     |
**** DONE 16.2.3 离线管理问题
     - ~nohup~: 不支持 bash 内置指令
*** DONE 16.3 程序管理 [4/4]
**** DONE 16.3.1 程序的观察
     - ~ps~
       #+begin_quote
       选项与参数：
       -A ：所有的process 均显示出来，与-e 具有同样的效用；
       -a ：不与terminal 有关的所有process ；
       -u ：有效使用者(effective user) 相关的process ；
       x ：通常与a 这个参数一起使用，可列出较完整资讯。
       输出格式规划：
       l ：较长、较详细的将该PID 的的资讯列出；
       j ：工作的格式(jobs format)
       -f ：做一个更为完整的输出。
       #+end_quote
       - ~ps -l~: 仅观察自己的bash相关的程序
       - ~ps aux~: 列出所有进程
       - ~top~: 观察程序的变化
       - ~pstree~: 进程树
**** DONE 16.3.2 程序的管理
     |  1 | SIGHUP  | 启动被终止的程序，可让该PID 重新读取自己的设定档，类似重新启动                                                                                                        |
     |  2 | SIGINT  | 相当于用键盘输入[ctrl]-c 来中断一个程序的进行                                                                                                                         |
     |  9 | SIGKILL | 代表强制中断一个程序的进行，如果该程序进行到一半， 那么尚未完成的部分可能会有『半产品』产生，类似vim会有.filename.swp 保留下来。                                      |
     | 15 | SIGTERM | 以正常的结束程序来终止该程序。由于是正常的终止， 所以后续的动作会将他完成。不过，如果该程序已经发生问题，就是无法使用正常的方法终止时， 输入这个signal 也是没有用的。 |
     | 19 | SIGSTOP | 相当于用键盘输入[ctrl]-z 来暂停一个程序的进行                                                                                                                         |
     - ~kill -signal PID~
     - ~killall -signal 进程名称~
**** DONE 16.3.3 关于程序的执行顺序
     - priority 与 nice 值
       *PRI(NEW) = PRI(OLD) + nice*
       - nice 值可调整的范围为-20 ~ 19 ；
       - root 可随意调整自己或他人程序的Nice 值，且范围为-20 ~ 19 ；
       - 一般使用者仅可调整自己程序的Nice 值，且范围仅为0 ~ 19 (避免一般用户抢占系统资源)；
       - 一般使用者仅可将nice 值越调越高，例如本来nice 为5 ，则未来仅能调整到大于5；
       - ~nice~
       - ~renice~
     - ~nice~
       #+begin_src sh
         nice [-n number] command
       #+end_src
     - ~renice~
       #+begin_src sh
         renice [-n number] PID
       #+end_src
**** DONE 16.3.4 系统资源的观察
     * ~free~ : 观察内存
     * ~unmae~ : 查阅系统与核心相关信息
     * ~uptime~ : 观察系统启动时间与工作负载 (~top~) 最上面一行
     * ~netstat~ : 网络或插槽
       #+begin_quote
       -a : ALL
       -t : TCP
       -u : UDP
       -n : PORT
       -l : LISTENING
       -p : PID
       #+end_quote
     * ~dmesg~: 核心信息
     * ~vmstat~: 系统资源变化
*** DONE 16.4 特殊档案与程序 [3/3]
**** DONE 16.4.1 具有SUID/SGID权限的指令执行状态
     + SUID权限仅对二进制程序有效
     + 执行者对于该程序需要具有x的可执行权限
     + 本权限仅在执行该程序的过程中有效
     + 执行者将具有该程序拥有者(owner)的权限
**** DONE 16.4.2 /proc/*代表的意义
     | cmdline           | 载入kernel 时所下达的相关指令与参数！查阅此档案，可了解指令是如何启动的！ |
     | /proc/cpuinfo     | 本机的CPU 的相关资讯，包含时脉、类型与运算功能等                          |
     | /proc/devices     | 这个档案记录了系统各个主要装置的主要装置代号，与 mknod有关呢！            |
     | /proc/filesystems | 目前系统已经载入的档案系统啰！                                            |
     | /proc/interrupts  | 目前系统上面的IRQ 分配状态。                                              |
     | /proc/ioports     | 目前系统上面各个装置所配置的I/O 位址。                                    |
     | /proc/kcore       | 这个就是记忆体的大小啦！好大对吧！但是不要读他啦！                        |
     | /proc/loadavg     | 还记得top以及uptime 吧？没错！上头的三个平均数值就是记录在此！            |
     | /proc/meminfo     | 使用free列出的记忆体资讯，嘿嘿！在这里也能够查阅到！                      |
     | /proc/modules     | 目前我们的Linux 已经载入的模组列表，也可以想成是驱动程式啦！              |
     | /proc/mounts      | 系统已经挂载的资料，就是用mount 这个指令呼叫出来的资料啦！                |
     | /proc/swaps       | 到底系统挂载入的记忆体在哪里？呵呵！使用掉的partition 就记录在此啦！      |
     | /proc/partitions  | 使用fdisk -l 会出现目前所有的partition 吧？在这个档案当中也有纪录喔！     |
     | /proc/uptime      | 就是用uptime 的时候，会出现的资讯啦！                                     |
     | /proc/version     | 核心的版本，就是用uname -a 显示的内容啦！                                 |
     | /proc/bus/*       | 一些汇流排的装置，还有USB 的装置也记录在此喔！                            |
**** DONE 16.4.3 查询已开启档案或已执行程序开启之档案
     - ~fuser~: 借由文件（或文件系统）找出正在使用该文件的程序
       #+begin_src sh
         [root@study ~]# fuser [-umv] [-k [i] [-signal]] file/dir
         选项与参数：
         -u ：除了程序的PID 之外，同时列出该程序的拥有者；
         -m ：后面接的那个档名会主动的上提到该档案系统的最顶层，对umount 不成功很有效！
         -v ：可以列出每个档案与程序还有指令的完整相关性！
         -k ：找出使用该档案/目录的PID ，并试图以SIGKILL 这个讯号给予该PID；
         -i ：必须与-k 配合，在删除PID 之前会先询问使用者意愿！
         -signal：例如-1 -15 等等，若不加的话，预设是SIGKILL (-9) 啰！

         范例一：找出目前所在目录的使用PID/所属帐号/权限为何？
         [root@study ~]# fuser -uv .
         USER PID ACCESS COMMAND
         /root: root 13888 ..c.. (root)bash
         root 31743 ..c.. (root)bash
       #+end_src
       - c: 程序在当前目录
       - e: 可执行
       - f: 是被打开的文件
       - r: 顶层目录
       - F: 被打开了, 等待回应中
       - m: 可能为分享的动态函数库
     - ~lsof~: 列出被程序所打开的文件文件名
     - ~pidof~:  找出某支正在执行的程序的PID
*** DONE 16.5 初探SELinux [2/2]
**** DONE 16.5.1 什么是SELinux
     - [[https://www.nsa.gov/What-We-Do/Research/SELinux/][National Security Agency | Central Security Service > What We Do > Research > SE Linux]]
     - 设计目标: 避免资源的误用
     - 传统的文件权限与帐号关系: 自主式存取控制, DAC (Discretionary Access Control)
     - 以政策规则制定程序读取特定文件: 委任式存取控制, MAC (Mandatory Access Control)
**** DONE 16.5.2 SELinux的运行模式
     - 主体(Subject): = process
     - 目标(Object) : 目标资源, = 文件系统
     - 政策(Policy) :
       - targeted: 针对网络服务限制较多, 针对本机限制较少, 是默认的政策;
       - minimum:  由target修订而来, 仅针对选择的程序保护
       - mls: 完整的SELinux限制, 限制较为严格. 建议使用默认的targeted政策即可
     - 安全性文本(security context) : 类似文件系统的 rwx
** DONE 第十七章 认识系统服务 [1/1]
*** DONE 17.1 什么是 daemon 与服务 (service) [1/1]
**** DONE 17.1.1 早期 System V 的 init 管理行为中 daemon 的主要分类 (Optional)
     - 服务的启动, 关闭与观察等方式: ~/etc/init.d/~
       - 启动: /etc/init.d/daemon start
       - 停止: /etc/init.d/daemon stop
       - 重启: /etc/init.d/daemon restart
       - 观察: /etc/init.d/daemon status
     - 服务的相依性问题: 独立启动, 或被一只总管程序管理
       - 独立启动模式 (stand alone)
       - 总管程序 (super daemon): 由特殊的xinetd 或 inetd 这两个总管程序提供的socket对应或port对应的管理
* Footnotes

[fn:2] [[https://linux.vbird.org/linux_basic/centos7/0320bash.php][鳥哥私房菜 - 第十章、認識與學習BASH]]
